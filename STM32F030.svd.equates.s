@ arm-none-eabi-as equates file for STM32F030
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (cyclic redundancy check calculation  unit) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_DR_Shift, 0   @ bitWidth 32 (Data register bits)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent data register) 
        .equ CRC_IDR_Shift, 0   @ bitWidth 8 (General-purpose 8-bit data register  bits)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_RESET_Shift, 0   @ bitWidth 1 (reset bit)  
        .equ CRC_REV_IN_Shift, 5   @ bitWidth 2 (Reverse input data)  
        .equ CRC_REV_OUT_Shift, 7   @ bitWidth 1 (Reverse output data)  
 
    .equ CRC_INIT, CRC_BASE + 0xC @ (Initial CRC value) 
        .equ CRC_INIT_Shift, 0   @ bitWidth 32 (Programmable initial CRC  value)  
 

@=========================== GPIOF ===========================@
.equ GPIOF_BASE, 0x48001400 @ (General-purpose I/Os) 
    .equ GPIOF_MODER, GPIOF_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOF_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OTYPER, GPIOF_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOF_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bit  15)  
        .equ GPIOF_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bit  14)  
        .equ GPIOF_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bit  13)  
        .equ GPIOF_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bit  12)  
        .equ GPIOF_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bit  11)  
        .equ GPIOF_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bit  10)  
        .equ GPIOF_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bit 9)  
        .equ GPIOF_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bit 8)  
        .equ GPIOF_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bit 7)  
        .equ GPIOF_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bit 6)  
        .equ GPIOF_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bit 5)  
        .equ GPIOF_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bit 4)  
        .equ GPIOF_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bit 3)  
        .equ GPIOF_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bit 2)  
        .equ GPIOF_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bit 1)  
        .equ GPIOF_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bit 0)  
 
    .equ GPIOF_OSPEEDR, GPIOF_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOF_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_PUPDR, GPIOF_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOF_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_IDR, GPIOF_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOF_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOF_ODR, GPIOF_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOF_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOF_BSRR, GPIOF_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOF_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOF_LCKR, GPIOF_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOF_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y)  
        .equ GPIOF_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOF_AFRL, GPIOF_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOF_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOF_AFRH, GPIOF_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOF_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 
    .equ GPIOF_BRR, GPIOF_BASE + 0x28 @ (Port bit reset register) 
        .equ GPIOF_BR0_Shift, 0   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR1_Shift, 1   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR2_Shift, 2   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR3_Shift, 3   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR4_Shift, 4   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR5_Shift, 5   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR6_Shift, 6   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR7_Shift, 7   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR8_Shift, 8   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR9_Shift, 9   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR10_Shift, 10   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR11_Shift, 11   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR12_Shift, 12   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR13_Shift, 13   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR14_Shift, 14   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOF_BR15_Shift, 15   @ bitWidth 1 (Port x Reset bit y)  
 

@=========================== GPIOD ===========================@
.equ GPIOD_BASE, 0x48000C00 @ (General-purpose I/Os) 
    .equ GPIOD_MODER, GPIOD_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOD_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OTYPER, GPIOD_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOD_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bit  15)  
        .equ GPIOD_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bit  14)  
        .equ GPIOD_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bit  13)  
        .equ GPIOD_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bit  12)  
        .equ GPIOD_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bit  11)  
        .equ GPIOD_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bit  10)  
        .equ GPIOD_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bit 9)  
        .equ GPIOD_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bit 8)  
        .equ GPIOD_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bit 7)  
        .equ GPIOD_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bit 6)  
        .equ GPIOD_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bit 5)  
        .equ GPIOD_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bit 4)  
        .equ GPIOD_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bit 3)  
        .equ GPIOD_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bit 2)  
        .equ GPIOD_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bit 1)  
        .equ GPIOD_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bit 0)  
 
    .equ GPIOD_OSPEEDR, GPIOD_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOD_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_PUPDR, GPIOD_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOD_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_IDR, GPIOD_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOD_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOD_ODR, GPIOD_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOD_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOD_BSRR, GPIOD_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOD_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOD_LCKR, GPIOD_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOD_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y)  
        .equ GPIOD_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOD_AFRL, GPIOD_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOD_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOD_AFRH, GPIOD_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOD_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 
    .equ GPIOD_BRR, GPIOD_BASE + 0x28 @ (Port bit reset register) 
        .equ GPIOD_BR0_Shift, 0   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR1_Shift, 1   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR2_Shift, 2   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR3_Shift, 3   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR4_Shift, 4   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR5_Shift, 5   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR6_Shift, 6   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR7_Shift, 7   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR8_Shift, 8   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR9_Shift, 9   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR10_Shift, 10   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR11_Shift, 11   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR12_Shift, 12   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR13_Shift, 13   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR14_Shift, 14   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOD_BR15_Shift, 15   @ bitWidth 1 (Port x Reset bit y)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x48000800 @ (General-purpose I/Os) 
    .equ GPIOC_MODER, GPIOC_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOC_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OTYPER, GPIOC_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOC_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bit  15)  
        .equ GPIOC_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bit  14)  
        .equ GPIOC_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bit  13)  
        .equ GPIOC_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bit  12)  
        .equ GPIOC_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bit  11)  
        .equ GPIOC_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bit  10)  
        .equ GPIOC_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bit 9)  
        .equ GPIOC_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bit 8)  
        .equ GPIOC_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bit 7)  
        .equ GPIOC_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bit 6)  
        .equ GPIOC_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bit 5)  
        .equ GPIOC_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bit 4)  
        .equ GPIOC_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bit 3)  
        .equ GPIOC_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bit 2)  
        .equ GPIOC_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bit 1)  
        .equ GPIOC_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bit 0)  
 
    .equ GPIOC_OSPEEDR, GPIOC_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOC_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_PUPDR, GPIOC_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOC_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOC_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOC_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOC_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOC_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y)  
        .equ GPIOC_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOC_AFRL, GPIOC_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOC_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOC_AFRH, GPIOC_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOC_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 
    .equ GPIOC_BRR, GPIOC_BASE + 0x28 @ (Port bit reset register) 
        .equ GPIOC_BR0_Shift, 0   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR1_Shift, 1   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR2_Shift, 2   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR3_Shift, 3   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR4_Shift, 4   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR5_Shift, 5   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR6_Shift, 6   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR7_Shift, 7   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR8_Shift, 8   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR9_Shift, 9   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR10_Shift, 10   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR11_Shift, 11   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR12_Shift, 12   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR13_Shift, 13   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR14_Shift, 14   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOC_BR15_Shift, 15   @ bitWidth 1 (Port x Reset bit y)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x48000400 @ (General-purpose I/Os) 
    .equ GPIOB_MODER, GPIOB_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOB_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OTYPER, GPIOB_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOB_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bit  15)  
        .equ GPIOB_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bit  14)  
        .equ GPIOB_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bit  13)  
        .equ GPIOB_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bit  12)  
        .equ GPIOB_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bit  11)  
        .equ GPIOB_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bit  10)  
        .equ GPIOB_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bit 9)  
        .equ GPIOB_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bit 8)  
        .equ GPIOB_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bit 7)  
        .equ GPIOB_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bit 6)  
        .equ GPIOB_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bit 5)  
        .equ GPIOB_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bit 4)  
        .equ GPIOB_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bit 3)  
        .equ GPIOB_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bit 2)  
        .equ GPIOB_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bit 1)  
        .equ GPIOB_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bit 0)  
 
    .equ GPIOB_OSPEEDR, GPIOB_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOB_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_PUPDR, GPIOB_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOB_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOB_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOB_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOB_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOB_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y)  
        .equ GPIOB_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOB_AFRL, GPIOB_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOB_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOB_AFRH, GPIOB_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOB_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 
    .equ GPIOB_BRR, GPIOB_BASE + 0x28 @ (Port bit reset register) 
        .equ GPIOB_BR0_Shift, 0   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR1_Shift, 1   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR2_Shift, 2   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR3_Shift, 3   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR4_Shift, 4   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR5_Shift, 5   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR6_Shift, 6   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR7_Shift, 7   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR8_Shift, 8   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR9_Shift, 9   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR10_Shift, 10   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR11_Shift, 11   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR12_Shift, 12   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR13_Shift, 13   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR14_Shift, 14   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOB_BR15_Shift, 15   @ bitWidth 1 (Port x Reset bit y)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x48000000 @ (General-purpose I/Os) 
    .equ GPIOA_MODER, GPIOA_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOA_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OTYPER, GPIOA_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOA_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OSPEEDR, GPIOA_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOA_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_PUPDR, GPIOA_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOA_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOA_IDR15_Shift, 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR14_Shift, 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR13_Shift, 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR12_Shift, 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR11_Shift, 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR10_Shift, 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR9_Shift, 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR8_Shift, 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR7_Shift, 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR6_Shift, 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR5_Shift, 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR4_Shift, 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR3_Shift, 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR2_Shift, 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR1_Shift, 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR0_Shift, 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOA_ODR15_Shift, 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR14_Shift, 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR13_Shift, 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR12_Shift, 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR11_Shift, 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR10_Shift, 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR9_Shift, 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR8_Shift, 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR7_Shift, 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR6_Shift, 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR5_Shift, 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR4_Shift, 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR3_Shift, 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR2_Shift, 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR1_Shift, 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR0_Shift, 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOA_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOA_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOA_AFRL, GPIOA_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOA_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOA_AFRH, GPIOA_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOA_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 
    .equ GPIOA_BRR, GPIOA_BASE + 0x28 @ (Port bit reset register) 
        .equ GPIOA_BR0_Shift, 0   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR1_Shift, 1   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR2_Shift, 2   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR3_Shift, 3   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR4_Shift, 4   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR5_Shift, 5   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR6_Shift, 6   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR7_Shift, 7   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR8_Shift, 8   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR9_Shift, 9   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR10_Shift, 10   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR11_Shift, 11   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR12_Shift, 12   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR13_Shift, 13   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR14_Shift, 14   @ bitWidth 1 (Port x Reset bit y)  
        .equ GPIOA_BR15_Shift, 15   @ bitWidth 1 (Port x Reset bit y)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI1_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI1_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI1_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI1_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI1_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_NSSP_Shift, 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI1_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI1_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI1_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI1_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI1_FRXTH_Shift, 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI1_LDMA_RX_Shift, 13   @ bitWidth 1 (Last DMA transfer for  reception)  
        .equ SPI1_LDMA_TX_Shift, 14   @ bitWidth 1 (Last DMA transfer for  transmission)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI1_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI1_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI1_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI1_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI1_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI1_I2SCFGR, SPI1_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI1_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI1_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI1_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI1_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI1_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI1_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI1_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI1_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI1_I2SPR, SPI1_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI1_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI1_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI1_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI2_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI2_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI2_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI2_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI2_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_NSSP_Shift, 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI2_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI2_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI2_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI2_FRXTH_Shift, 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI2_LDMA_RX_Shift, 13   @ bitWidth 1 (Last DMA transfer for  reception)  
        .equ SPI2_LDMA_TX_Shift, 14   @ bitWidth 1 (Last DMA transfer for  transmission)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI2_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI2_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI2_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI2_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI2_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI2_I2SCFGR, SPI2_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI2_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI2_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI2_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI2_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI2_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI2_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI2_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI2_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI2_I2SPR, SPI2_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI2_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI2_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI2_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x40007000 @ (Power control) 
    .equ PWR_CR, PWR_BASE + 0x0 @ (power control register) 
        .equ PWR_FPDS_Shift, 9   @ bitWidth 1 (Flash power down in Stop  mode)  
        .equ PWR_DBP_Shift, 8   @ bitWidth 1 (Disable backup domain write  protection)  
        .equ PWR_PLS_Shift, 5   @ bitWidth 3 (PVD level selection)  
        .equ PWR_PVDE_Shift, 4   @ bitWidth 1 (Power voltage detector  enable)  
        .equ PWR_CSBF_Shift, 3   @ bitWidth 1 (Clear standby flag)  
        .equ PWR_CWUF_Shift, 2   @ bitWidth 1 (Clear wakeup flag)  
        .equ PWR_PDDS_Shift, 1   @ bitWidth 1 (Power down deepsleep)  
        .equ PWR_LPDS_Shift, 0   @ bitWidth 1 (Low-power deep sleep)  
 
    .equ PWR_CSR, PWR_BASE + 0x4 @ (power control/status register) 
        .equ PWR_BRE_Shift, 9   @ bitWidth 1 (Backup regulator enable)  
        .equ PWR_EWUP_Shift, 8   @ bitWidth 1 (Enable WKUP pin)  
        .equ PWR_BRR_Shift, 3   @ bitWidth 1 (Backup regulator ready)  
        .equ PWR_PVDO_Shift, 2   @ bitWidth 1 (PVD output)  
        .equ PWR_SBF_Shift, 1   @ bitWidth 1 (Standby flag)  
        .equ PWR_WUF_Shift, 0   @ bitWidth 1 (Wakeup flag)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter-integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (Control register 1) 
        .equ I2C1_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C1_TXIE_Shift, 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C1_RXIE_Shift, 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C1_ADDRIE_Shift, 3   @ bitWidth 1 (Address match interrupt enable slave  only)  
        .equ I2C1_NACKIE_Shift, 4   @ bitWidth 1 (Not acknowledge received interrupt  enable)  
        .equ I2C1_STOPIE_Shift, 5   @ bitWidth 1 (STOP detection Interrupt  enable)  
        .equ I2C1_TCIE_Shift, 6   @ bitWidth 1 (Transfer Complete interrupt  enable)  
        .equ I2C1_ERRIE_Shift, 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C1_ANFOFF_Shift, 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C1_SWRST_Shift, 13   @ bitWidth 1 (Software reset)  
        .equ I2C1_TXDMAEN_Shift, 14   @ bitWidth 1 (DMA transmission requests  enable)  
        .equ I2C1_RXDMAEN_Shift, 15   @ bitWidth 1 (DMA reception requests  enable)  
        .equ I2C1_SBC_Shift, 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C1_NOSTRETCH_Shift, 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C1_WUPEN_Shift, 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C1_GCEN_Shift, 19   @ bitWidth 1 (General call enable)  
        .equ I2C1_SMBHEN_Shift, 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C1_SMBDEN_Shift, 21   @ bitWidth 1 (SMBus Device Default address  enable)  
        .equ I2C1_ALERTEN_Shift, 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C1_PECEN_Shift, 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (Control register 2) 
        .equ I2C1_PECBYTE_Shift, 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C1_AUTOEND_Shift, 25   @ bitWidth 1 (Automatic end mode master  mode)  
        .equ I2C1_RELOAD_Shift, 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C1_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C1_NACK_Shift, 15   @ bitWidth 1 (NACK generation slave  mode)  
        .equ I2C1_STOP_Shift, 14   @ bitWidth 1 (Stop generation master  mode)  
        .equ I2C1_START_Shift, 13   @ bitWidth 1 (Start generation)  
        .equ I2C1_HEAD10R_Shift, 12   @ bitWidth 1 (10-bit address header only read  direction master receiver mode)  
        .equ I2C1_ADD10_Shift, 11   @ bitWidth 1 (10-bit addressing mode master  mode)  
        .equ I2C1_RD_WRN_Shift, 10   @ bitWidth 1 (Transfer direction master  mode)  
        .equ I2C1_SADD8_Shift, 8   @ bitWidth 2 (Slave address bit 9:8 master  mode)  
        .equ I2C1_SADD1_Shift, 1   @ bitWidth 7 (Slave address bit 7:1 master  mode)  
        .equ I2C1_SADD0_Shift, 0   @ bitWidth 1 (Slave address bit 0 master  mode)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (Own address register 1) 
        .equ I2C1_OA1_0_Shift, 0   @ bitWidth 1 (Interface address)  
        .equ I2C1_OA1_1_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OA1_8_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C1_OA1MODE_Shift, 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C1_OA1EN_Shift, 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (Own address register 2) 
        .equ I2C1_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C1_OA2EN_Shift, 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C1_TIMINGR, I2C1_BASE + 0x10 @ (Timing register) 
        .equ I2C1_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master  mode)  
        .equ I2C1_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master  mode)  
        .equ I2C1_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C1_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C1_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C1_TIMEOUTR, I2C1_BASE + 0x14 @ (Status register 1) 
        .equ I2C1_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C1_TIDLE_Shift, 12   @ bitWidth 1 (Idle clock timeout  detection)  
        .equ I2C1_TIMOUTEN_Shift, 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C1_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C1_TEXTEN_Shift, 31   @ bitWidth 1 (Extended clock timeout  enable)  
 
    .equ I2C1_ISR, I2C1_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C1_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave  mode)  
        .equ I2C1_DIR_Shift, 16   @ bitWidth 1 (Transfer direction Slave  mode)  
        .equ I2C1_BUSY_Shift, 15   @ bitWidth 1 (Bus busy)  
        .equ I2C1_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_TIMEOUT_Shift, 12   @ bitWidth 1 (Timeout or t_low detection  flag)  
        .equ I2C1_PECERR_Shift, 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_OVR_Shift, 10   @ bitWidth 1 (Overrun/Underrun slave  mode)  
        .equ I2C1_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C1_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_TCR_Shift, 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C1_TC_Shift, 6   @ bitWidth 1 (Transfer Complete master  mode)  
        .equ I2C1_STOPF_Shift, 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C1_NACKF_Shift, 4   @ bitWidth 1 (Not acknowledge received  flag)  
        .equ I2C1_ADDR_Shift, 3   @ bitWidth 1 (Address matched slave  mode)  
        .equ I2C1_RXNE_Shift, 2   @ bitWidth 1 (Receive data register not empty  receivers)  
        .equ I2C1_TXIS_Shift, 1   @ bitWidth 1 (Transmit interrupt status  transmitters)  
        .equ I2C1_TXE_Shift, 0   @ bitWidth 1 (Transmit data register empty  transmitters)  
 
    .equ I2C1_ICR, I2C1_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C1_ALERTCF_Shift, 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C1_TIMOUTCF_Shift, 12   @ bitWidth 1 (Timeout detection flag  clear)  
        .equ I2C1_PECCF_Shift, 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C1_OVRCF_Shift, 10   @ bitWidth 1 (Overrun/Underrun flag  clear)  
        .equ I2C1_ARLOCF_Shift, 9   @ bitWidth 1 (Arbitration lost flag  clear)  
        .equ I2C1_BERRCF_Shift, 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C1_STOPCF_Shift, 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C1_NACKCF_Shift, 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C1_ADDRCF_Shift, 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C1_PECR, I2C1_BASE + 0x20 @ (PEC register) 
        .equ I2C1_PEC_Shift, 0   @ bitWidth 8 (Packet error checking  register)  
 
    .equ I2C1_RXDR, I2C1_BASE + 0x24 @ (Receive data register) 
        .equ I2C1_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C1_TXDR, I2C1_BASE + 0x28 @ (Transmit data register) 
        .equ I2C1_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter-integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (Control register 1) 
        .equ I2C2_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C2_TXIE_Shift, 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C2_RXIE_Shift, 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C2_ADDRIE_Shift, 3   @ bitWidth 1 (Address match interrupt enable slave  only)  
        .equ I2C2_NACKIE_Shift, 4   @ bitWidth 1 (Not acknowledge received interrupt  enable)  
        .equ I2C2_STOPIE_Shift, 5   @ bitWidth 1 (STOP detection Interrupt  enable)  
        .equ I2C2_TCIE_Shift, 6   @ bitWidth 1 (Transfer Complete interrupt  enable)  
        .equ I2C2_ERRIE_Shift, 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C2_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C2_ANFOFF_Shift, 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C2_SWRST_Shift, 13   @ bitWidth 1 (Software reset)  
        .equ I2C2_TXDMAEN_Shift, 14   @ bitWidth 1 (DMA transmission requests  enable)  
        .equ I2C2_RXDMAEN_Shift, 15   @ bitWidth 1 (DMA reception requests  enable)  
        .equ I2C2_SBC_Shift, 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C2_NOSTRETCH_Shift, 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C2_WUPEN_Shift, 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C2_GCEN_Shift, 19   @ bitWidth 1 (General call enable)  
        .equ I2C2_SMBHEN_Shift, 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C2_SMBDEN_Shift, 21   @ bitWidth 1 (SMBus Device Default address  enable)  
        .equ I2C2_ALERTEN_Shift, 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C2_PECEN_Shift, 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (Control register 2) 
        .equ I2C2_PECBYTE_Shift, 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C2_AUTOEND_Shift, 25   @ bitWidth 1 (Automatic end mode master  mode)  
        .equ I2C2_RELOAD_Shift, 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C2_NACK_Shift, 15   @ bitWidth 1 (NACK generation slave  mode)  
        .equ I2C2_STOP_Shift, 14   @ bitWidth 1 (Stop generation master  mode)  
        .equ I2C2_START_Shift, 13   @ bitWidth 1 (Start generation)  
        .equ I2C2_HEAD10R_Shift, 12   @ bitWidth 1 (10-bit address header only read  direction master receiver mode)  
        .equ I2C2_ADD10_Shift, 11   @ bitWidth 1 (10-bit addressing mode master  mode)  
        .equ I2C2_RD_WRN_Shift, 10   @ bitWidth 1 (Transfer direction master  mode)  
        .equ I2C2_SADD8_Shift, 8   @ bitWidth 2 (Slave address bit 9:8 master  mode)  
        .equ I2C2_SADD1_Shift, 1   @ bitWidth 7 (Slave address bit 7:1 master  mode)  
        .equ I2C2_SADD0_Shift, 0   @ bitWidth 1 (Slave address bit 0 master  mode)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (Own address register 1) 
        .equ I2C2_OA1_0_Shift, 0   @ bitWidth 1 (Interface address)  
        .equ I2C2_OA1_1_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OA1_8_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C2_OA1MODE_Shift, 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C2_OA1EN_Shift, 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (Own address register 2) 
        .equ I2C2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C2_OA2EN_Shift, 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C2_TIMINGR, I2C2_BASE + 0x10 @ (Timing register) 
        .equ I2C2_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master  mode)  
        .equ I2C2_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master  mode)  
        .equ I2C2_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C2_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C2_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C2_TIMEOUTR, I2C2_BASE + 0x14 @ (Status register 1) 
        .equ I2C2_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C2_TIDLE_Shift, 12   @ bitWidth 1 (Idle clock timeout  detection)  
        .equ I2C2_TIMOUTEN_Shift, 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C2_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C2_TEXTEN_Shift, 31   @ bitWidth 1 (Extended clock timeout  enable)  
 
    .equ I2C2_ISR, I2C2_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C2_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave  mode)  
        .equ I2C2_DIR_Shift, 16   @ bitWidth 1 (Transfer direction Slave  mode)  
        .equ I2C2_BUSY_Shift, 15   @ bitWidth 1 (Bus busy)  
        .equ I2C2_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_TIMEOUT_Shift, 12   @ bitWidth 1 (Timeout or t_low detection  flag)  
        .equ I2C2_PECERR_Shift, 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_OVR_Shift, 10   @ bitWidth 1 (Overrun/Underrun slave  mode)  
        .equ I2C2_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C2_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_TCR_Shift, 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C2_TC_Shift, 6   @ bitWidth 1 (Transfer Complete master  mode)  
        .equ I2C2_STOPF_Shift, 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C2_NACKF_Shift, 4   @ bitWidth 1 (Not acknowledge received  flag)  
        .equ I2C2_ADDR_Shift, 3   @ bitWidth 1 (Address matched slave  mode)  
        .equ I2C2_RXNE_Shift, 2   @ bitWidth 1 (Receive data register not empty  receivers)  
        .equ I2C2_TXIS_Shift, 1   @ bitWidth 1 (Transmit interrupt status  transmitters)  
        .equ I2C2_TXE_Shift, 0   @ bitWidth 1 (Transmit data register empty  transmitters)  
 
    .equ I2C2_ICR, I2C2_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C2_ALERTCF_Shift, 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C2_TIMOUTCF_Shift, 12   @ bitWidth 1 (Timeout detection flag  clear)  
        .equ I2C2_PECCF_Shift, 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C2_OVRCF_Shift, 10   @ bitWidth 1 (Overrun/Underrun flag  clear)  
        .equ I2C2_ARLOCF_Shift, 9   @ bitWidth 1 (Arbitration lost flag  clear)  
        .equ I2C2_BERRCF_Shift, 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C2_STOPCF_Shift, 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C2_NACKCF_Shift, 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C2_ADDRCF_Shift, 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C2_PECR, I2C2_BASE + 0x20 @ (PEC register) 
        .equ I2C2_PEC_Shift, 0   @ bitWidth 8 (Packet error checking  register)  
 
    .equ I2C2_RXDR, I2C2_BASE + 0x24 @ (Receive data register) 
        .equ I2C2_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C2_TXDR, I2C2_BASE + 0x28 @ (Transmit data register) 
        .equ I2C2_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register) 
        .equ IWDG_KEY_Shift, 0   @ bitWidth 16 (Key value)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register) 
        .equ IWDG_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register) 
        .equ IWDG_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload  value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register) 
        .equ IWDG_PVU_Shift, 0   @ bitWidth 1 (Watchdog prescaler value  update)  
        .equ IWDG_RVU_Shift, 1   @ bitWidth 1 (Watchdog counter reload value  update)  
        .equ IWDG_WVU_Shift, 2   @ bitWidth 1 (Watchdog counter window value  update)  
 
    .equ IWDG_WINR, IWDG_BASE + 0x10 @ (Window register) 
        .equ IWDG_WIN_Shift, 0   @ bitWidth 12 (Watchdog counter window  value)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (Window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register) 
        .equ WWDG_WDGA_Shift, 7   @ bitWidth 1 (Activation bit)  
        .equ WWDG_T_Shift, 0   @ bitWidth 7 (7-bit counter)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register) 
        .equ WWDG_EWI_Shift, 9   @ bitWidth 1 (Early wakeup interrupt)  
        .equ WWDG_WDGTB_Shift, 7   @ bitWidth 2 (Timer base)  
        .equ WWDG_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (Status register) 
        .equ WWDG_EWIF_Shift, 0   @ bitWidth 1 (Early wakeup interrupt  flag)  
 

@=========================== TIM1 ===========================@
.equ TIM1_BASE, 0x40012C00 @ (Advanced-timers) 
    .equ TIM1_CR1, TIM1_BASE + 0x0 @ (control register 1) 
        .equ TIM1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM1_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM1_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM1_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM1_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM1_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM1_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM1_CR2, TIM1_BASE + 0x4 @ (control register 2) 
        .equ TIM1_OIS4_Shift, 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM1_OIS3N_Shift, 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_OIS3_Shift, 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_OIS2N_Shift, 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_OIS2_Shift, 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM1_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM1_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM1_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM1_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM1_SMCR, TIM1_BASE + 0x8 @ (slave mode control register) 
        .equ TIM1_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM1_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM1_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM1_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM1_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM1_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM1_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM1_DIER, TIM1_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM1_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM1_COMDE_Shift, 13   @ bitWidth 1 (Reserved)  
        .equ TIM1_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM1_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM1_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM1_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM1_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM1_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM1_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM1_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM1_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM1_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM1_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM1_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM1_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM1_SR, TIM1_BASE + 0x10 @ (status register) 
        .equ TIM1_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM1_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM1_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM1_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM1_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM1_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM1_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM1_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM1_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM1_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM1_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM1_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM1_EGR, TIM1_BASE + 0x14 @ (event generation register) 
        .equ TIM1_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM1_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM1_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM1_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM1_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM1_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM1_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM1_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM1_CCMR1_Output, TIM1_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM1_OC2CE_Shift, 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM1_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM1_OC2PE_Shift, 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM1_OC2FE_Shift, 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM1_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_OC1CE_Shift, 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM1_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM1_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM1_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM1_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR1_Input, TIM1_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM1_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM1_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM1_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM1_IC1PCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM1_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR2_Output, TIM1_BASE + 0x1C @ (capture/compare mode register output  mode) 
        .equ TIM1_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM1_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM1_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM1_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM1_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM1_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM1_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM1_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM1_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM1_CCMR2_Input, TIM1_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM1_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM1_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM1_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM1_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM1_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM1_CCER, TIM1_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM1_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM1_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CC3NE_Shift, 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM1_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM1_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CC2NE_Shift, 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM1_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM1_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM1_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM1_CNT, TIM1_BASE + 0x24 @ (counter) 
        .equ TIM1_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM1_PSC, TIM1_BASE + 0x28 @ (prescaler) 
        .equ TIM1_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM1_ARR, TIM1_BASE + 0x2C @ (auto-reload register) 
        .equ TIM1_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM1_RCR, TIM1_BASE + 0x30 @ (repetition counter register) 
        .equ TIM1_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM1_CCR1, TIM1_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM1_CCR2, TIM1_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM1_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM1_CCR3, TIM1_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM1_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare 3 value)  
 
    .equ TIM1_CCR4, TIM1_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM1_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare 3 value)  
 
    .equ TIM1_BDTR, TIM1_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM1_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM1_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM1_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM1_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM1_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM1_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM1_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM1_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM1_DCR, TIM1_BASE + 0x48 @ (DMA control register) 
        .equ TIM1_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM1_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM1_DMAR, TIM1_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM1_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM3 ===========================@
.equ TIM3_BASE, 0x40000400 @ (General-purpose-timers) 
    .equ TIM3_CR1, TIM3_BASE + 0x0 @ (control register 1) 
        .equ TIM3_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM3_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM3_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM3_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM3_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM3_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM3_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM3_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM3_CR2, TIM3_BASE + 0x4 @ (control register 2) 
        .equ TIM3_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM3_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM3_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM3_SMCR, TIM3_BASE + 0x8 @ (slave mode control register) 
        .equ TIM3_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM3_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM3_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM3_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM3_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM3_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM3_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM3_DIER, TIM3_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM3_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM3_COMDE_Shift, 13   @ bitWidth 1 (Reserved)  
        .equ TIM3_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM3_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM3_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM3_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM3_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM3_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM3_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM3_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM3_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM3_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM3_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM3_SR, TIM3_BASE + 0x10 @ (status register) 
        .equ TIM3_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM3_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM3_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM3_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM3_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM3_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM3_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM3_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM3_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM3_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM3_EGR, TIM3_BASE + 0x14 @ (event generation register) 
        .equ TIM3_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM3_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM3_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM3_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM3_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM3_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM3_CCMR1_Output, TIM3_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM3_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM3_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM3_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM3_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM3_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM3_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM3_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM3_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM3_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM3_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR1_Input, TIM3_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM3_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM3_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM3_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM3_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM3_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM3_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR2_Output, TIM3_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM3_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM3_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM3_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM3_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM3_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM3_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM3_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM3_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM3_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCMR2_Input, TIM3_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM3_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM3_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM3_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM3_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM3_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCER, TIM3_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM3_CC4NP_Shift, 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM3_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM3_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM3_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM3_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM3_CNT, TIM3_BASE + 0x24 @ (counter) 
        .equ TIM3_CNT_H_Shift, 16   @ bitWidth 16 (High counter value TIM2  only)  
        .equ TIM3_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM3_PSC, TIM3_BASE + 0x28 @ (prescaler) 
        .equ TIM3_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM3_ARR, TIM3_BASE + 0x2C @ (auto-reload register) 
        .equ TIM3_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value TIM2  only)  
        .equ TIM3_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM3_CCR1, TIM3_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM3_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value TIM2  only)  
        .equ TIM3_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM3_CCR2, TIM3_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM3_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value TIM2  only)  
        .equ TIM3_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM3_CCR3, TIM3_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_CCR4, TIM3_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM3_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM3_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_DCR, TIM3_BASE + 0x48 @ (DMA control register) 
        .equ TIM3_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM3_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM3_DMAR, TIM3_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM3_DMAR_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM14 ===========================@
.equ TIM14_BASE, 0x40002000 @ (General-purpose-timers) 
    .equ TIM14_CR1, TIM14_BASE + 0x0 @ (control register 1) 
        .equ TIM14_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM14_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM14_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM14_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM14_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM14_DIER, TIM14_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM14_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM14_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM14_SR, TIM14_BASE + 0x10 @ (status register) 
        .equ TIM14_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM14_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM14_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM14_EGR, TIM14_BASE + 0x14 @ (event generation register) 
        .equ TIM14_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM14_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM14_CCMR1_Output, TIM14_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM14_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
        .equ TIM14_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM14_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM14_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
 
    .equ TIM14_CCMR1_Input, TIM14_BASE + 0x18 @ (capture/compare mode register input  mode) 
        .equ TIM14_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM14_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM14_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM14_CCER, TIM14_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM14_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM14_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM14_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM14_CNT, TIM14_BASE + 0x24 @ (counter) 
        .equ TIM14_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM14_PSC, TIM14_BASE + 0x28 @ (prescaler) 
        .equ TIM14_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM14_ARR, TIM14_BASE + 0x2C @ (auto-reload register) 
        .equ TIM14_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM14_CCR1, TIM14_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM14_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM14_OR, TIM14_BASE + 0x50 @ (option register) 
        .equ TIM14_RMP_Shift, 0   @ bitWidth 2 (Timer input 1 remap)  
 

@=========================== TIM6 ===========================@
.equ TIM6_BASE, 0x40001000 @ (Basic-timers) 
    .equ TIM6_CR1, TIM6_BASE + 0x0 @ (control register 1) 
        .equ TIM6_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM6_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM6_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM6_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM6_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM6_CR2, TIM6_BASE + 0x4 @ (control register 2) 
        .equ TIM6_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM6_DIER, TIM6_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM6_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM6_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM6_SR, TIM6_BASE + 0x10 @ (status register) 
        .equ TIM6_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM6_EGR, TIM6_BASE + 0x14 @ (event generation register) 
        .equ TIM6_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM6_CNT, TIM6_BASE + 0x24 @ (counter) 
        .equ TIM6_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM6_PSC, TIM6_BASE + 0x28 @ (prescaler) 
        .equ TIM6_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM6_ARR, TIM6_BASE + 0x2C @ (auto-reload register) 
        .equ TIM6_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x40010400 @ (External interrupt/event  controller) 
    .equ EXTI_IMR, EXTI_BASE + 0x0 @ (Interrupt mask register  EXTI_IMR) 
        .equ EXTI_MR0_Shift, 0   @ bitWidth 1 (Interrupt Mask on line 0)  
        .equ EXTI_MR1_Shift, 1   @ bitWidth 1 (Interrupt Mask on line 1)  
        .equ EXTI_MR2_Shift, 2   @ bitWidth 1 (Interrupt Mask on line 2)  
        .equ EXTI_MR3_Shift, 3   @ bitWidth 1 (Interrupt Mask on line 3)  
        .equ EXTI_MR4_Shift, 4   @ bitWidth 1 (Interrupt Mask on line 4)  
        .equ EXTI_MR5_Shift, 5   @ bitWidth 1 (Interrupt Mask on line 5)  
        .equ EXTI_MR6_Shift, 6   @ bitWidth 1 (Interrupt Mask on line 6)  
        .equ EXTI_MR7_Shift, 7   @ bitWidth 1 (Interrupt Mask on line 7)  
        .equ EXTI_MR8_Shift, 8   @ bitWidth 1 (Interrupt Mask on line 8)  
        .equ EXTI_MR9_Shift, 9   @ bitWidth 1 (Interrupt Mask on line 9)  
        .equ EXTI_MR10_Shift, 10   @ bitWidth 1 (Interrupt Mask on line 10)  
        .equ EXTI_MR11_Shift, 11   @ bitWidth 1 (Interrupt Mask on line 11)  
        .equ EXTI_MR12_Shift, 12   @ bitWidth 1 (Interrupt Mask on line 12)  
        .equ EXTI_MR13_Shift, 13   @ bitWidth 1 (Interrupt Mask on line 13)  
        .equ EXTI_MR14_Shift, 14   @ bitWidth 1 (Interrupt Mask on line 14)  
        .equ EXTI_MR15_Shift, 15   @ bitWidth 1 (Interrupt Mask on line 15)  
        .equ EXTI_MR16_Shift, 16   @ bitWidth 1 (Interrupt Mask on line 16)  
        .equ EXTI_MR17_Shift, 17   @ bitWidth 1 (Interrupt Mask on line 17)  
        .equ EXTI_MR18_Shift, 18   @ bitWidth 1 (Interrupt Mask on line 18)  
        .equ EXTI_MR19_Shift, 19   @ bitWidth 1 (Interrupt Mask on line 19)  
        .equ EXTI_MR20_Shift, 20   @ bitWidth 1 (Interrupt Mask on line 20)  
        .equ EXTI_MR21_Shift, 21   @ bitWidth 1 (Interrupt Mask on line 21)  
        .equ EXTI_MR22_Shift, 22   @ bitWidth 1 (Interrupt Mask on line 22)  
        .equ EXTI_MR23_Shift, 23   @ bitWidth 1 (Interrupt Mask on line 23)  
        .equ EXTI_MR24_Shift, 24   @ bitWidth 1 (Interrupt Mask on line 24)  
        .equ EXTI_MR25_Shift, 25   @ bitWidth 1 (Interrupt Mask on line 25)  
        .equ EXTI_MR26_Shift, 26   @ bitWidth 1 (Interrupt Mask on line 26)  
        .equ EXTI_MR27_Shift, 27   @ bitWidth 1 (Interrupt Mask on line 27)  
 
    .equ EXTI_EMR, EXTI_BASE + 0x4 @ (Event mask register EXTI_EMR) 
        .equ EXTI_MR0_Shift, 0   @ bitWidth 1 (Event Mask on line 0)  
        .equ EXTI_MR1_Shift, 1   @ bitWidth 1 (Event Mask on line 1)  
        .equ EXTI_MR2_Shift, 2   @ bitWidth 1 (Event Mask on line 2)  
        .equ EXTI_MR3_Shift, 3   @ bitWidth 1 (Event Mask on line 3)  
        .equ EXTI_MR4_Shift, 4   @ bitWidth 1 (Event Mask on line 4)  
        .equ EXTI_MR5_Shift, 5   @ bitWidth 1 (Event Mask on line 5)  
        .equ EXTI_MR6_Shift, 6   @ bitWidth 1 (Event Mask on line 6)  
        .equ EXTI_MR7_Shift, 7   @ bitWidth 1 (Event Mask on line 7)  
        .equ EXTI_MR8_Shift, 8   @ bitWidth 1 (Event Mask on line 8)  
        .equ EXTI_MR9_Shift, 9   @ bitWidth 1 (Event Mask on line 9)  
        .equ EXTI_MR10_Shift, 10   @ bitWidth 1 (Event Mask on line 10)  
        .equ EXTI_MR11_Shift, 11   @ bitWidth 1 (Event Mask on line 11)  
        .equ EXTI_MR12_Shift, 12   @ bitWidth 1 (Event Mask on line 12)  
        .equ EXTI_MR13_Shift, 13   @ bitWidth 1 (Event Mask on line 13)  
        .equ EXTI_MR14_Shift, 14   @ bitWidth 1 (Event Mask on line 14)  
        .equ EXTI_MR15_Shift, 15   @ bitWidth 1 (Event Mask on line 15)  
        .equ EXTI_MR16_Shift, 16   @ bitWidth 1 (Event Mask on line 16)  
        .equ EXTI_MR17_Shift, 17   @ bitWidth 1 (Event Mask on line 17)  
        .equ EXTI_MR18_Shift, 18   @ bitWidth 1 (Event Mask on line 18)  
        .equ EXTI_MR19_Shift, 19   @ bitWidth 1 (Event Mask on line 19)  
        .equ EXTI_MR20_Shift, 20   @ bitWidth 1 (Event Mask on line 20)  
        .equ EXTI_MR21_Shift, 21   @ bitWidth 1 (Event Mask on line 21)  
        .equ EXTI_MR22_Shift, 22   @ bitWidth 1 (Event Mask on line 22)  
        .equ EXTI_MR23_Shift, 23   @ bitWidth 1 (Event Mask on line 23)  
        .equ EXTI_MR24_Shift, 24   @ bitWidth 1 (Event Mask on line 24)  
        .equ EXTI_MR25_Shift, 25   @ bitWidth 1 (Event Mask on line 25)  
        .equ EXTI_MR26_Shift, 26   @ bitWidth 1 (Event Mask on line 26)  
        .equ EXTI_MR27_Shift, 27   @ bitWidth 1 (Event Mask on line 27)  
 
    .equ EXTI_RTSR, EXTI_BASE + 0x8 @ (Rising Trigger selection register  EXTI_RTSR) 
        .equ EXTI_TR0_Shift, 0   @ bitWidth 1 (Rising trigger event configuration of  line 0)  
        .equ EXTI_TR1_Shift, 1   @ bitWidth 1 (Rising trigger event configuration of  line 1)  
        .equ EXTI_TR2_Shift, 2   @ bitWidth 1 (Rising trigger event configuration of  line 2)  
        .equ EXTI_TR3_Shift, 3   @ bitWidth 1 (Rising trigger event configuration of  line 3)  
        .equ EXTI_TR4_Shift, 4   @ bitWidth 1 (Rising trigger event configuration of  line 4)  
        .equ EXTI_TR5_Shift, 5   @ bitWidth 1 (Rising trigger event configuration of  line 5)  
        .equ EXTI_TR6_Shift, 6   @ bitWidth 1 (Rising trigger event configuration of  line 6)  
        .equ EXTI_TR7_Shift, 7   @ bitWidth 1 (Rising trigger event configuration of  line 7)  
        .equ EXTI_TR8_Shift, 8   @ bitWidth 1 (Rising trigger event configuration of  line 8)  
        .equ EXTI_TR9_Shift, 9   @ bitWidth 1 (Rising trigger event configuration of  line 9)  
        .equ EXTI_TR10_Shift, 10   @ bitWidth 1 (Rising trigger event configuration of  line 10)  
        .equ EXTI_TR11_Shift, 11   @ bitWidth 1 (Rising trigger event configuration of  line 11)  
        .equ EXTI_TR12_Shift, 12   @ bitWidth 1 (Rising trigger event configuration of  line 12)  
        .equ EXTI_TR13_Shift, 13   @ bitWidth 1 (Rising trigger event configuration of  line 13)  
        .equ EXTI_TR14_Shift, 14   @ bitWidth 1 (Rising trigger event configuration of  line 14)  
        .equ EXTI_TR15_Shift, 15   @ bitWidth 1 (Rising trigger event configuration of  line 15)  
        .equ EXTI_TR16_Shift, 16   @ bitWidth 1 (Rising trigger event configuration of  line 16)  
        .equ EXTI_TR17_Shift, 17   @ bitWidth 1 (Rising trigger event configuration of  line 17)  
        .equ EXTI_TR19_Shift, 19   @ bitWidth 1 (Rising trigger event configuration of  line 19)  
 
    .equ EXTI_FTSR, EXTI_BASE + 0xC @ (Falling Trigger selection register  EXTI_FTSR) 
        .equ EXTI_TR0_Shift, 0   @ bitWidth 1 (Falling trigger event configuration of  line 0)  
        .equ EXTI_TR1_Shift, 1   @ bitWidth 1 (Falling trigger event configuration of  line 1)  
        .equ EXTI_TR2_Shift, 2   @ bitWidth 1 (Falling trigger event configuration of  line 2)  
        .equ EXTI_TR3_Shift, 3   @ bitWidth 1 (Falling trigger event configuration of  line 3)  
        .equ EXTI_TR4_Shift, 4   @ bitWidth 1 (Falling trigger event configuration of  line 4)  
        .equ EXTI_TR5_Shift, 5   @ bitWidth 1 (Falling trigger event configuration of  line 5)  
        .equ EXTI_TR6_Shift, 6   @ bitWidth 1 (Falling trigger event configuration of  line 6)  
        .equ EXTI_TR7_Shift, 7   @ bitWidth 1 (Falling trigger event configuration of  line 7)  
        .equ EXTI_TR8_Shift, 8   @ bitWidth 1 (Falling trigger event configuration of  line 8)  
        .equ EXTI_TR9_Shift, 9   @ bitWidth 1 (Falling trigger event configuration of  line 9)  
        .equ EXTI_TR10_Shift, 10   @ bitWidth 1 (Falling trigger event configuration of  line 10)  
        .equ EXTI_TR11_Shift, 11   @ bitWidth 1 (Falling trigger event configuration of  line 11)  
        .equ EXTI_TR12_Shift, 12   @ bitWidth 1 (Falling trigger event configuration of  line 12)  
        .equ EXTI_TR13_Shift, 13   @ bitWidth 1 (Falling trigger event configuration of  line 13)  
        .equ EXTI_TR14_Shift, 14   @ bitWidth 1 (Falling trigger event configuration of  line 14)  
        .equ EXTI_TR15_Shift, 15   @ bitWidth 1 (Falling trigger event configuration of  line 15)  
        .equ EXTI_TR16_Shift, 16   @ bitWidth 1 (Falling trigger event configuration of  line 16)  
        .equ EXTI_TR17_Shift, 17   @ bitWidth 1 (Falling trigger event configuration of  line 17)  
        .equ EXTI_TR19_Shift, 19   @ bitWidth 1 (Falling trigger event configuration of  line 19)  
 
    .equ EXTI_SWIER, EXTI_BASE + 0x10 @ (Software interrupt event register  EXTI_SWIER) 
        .equ EXTI_SWIER0_Shift, 0   @ bitWidth 1 (Software Interrupt on line  0)  
        .equ EXTI_SWIER1_Shift, 1   @ bitWidth 1 (Software Interrupt on line  1)  
        .equ EXTI_SWIER2_Shift, 2   @ bitWidth 1 (Software Interrupt on line  2)  
        .equ EXTI_SWIER3_Shift, 3   @ bitWidth 1 (Software Interrupt on line  3)  
        .equ EXTI_SWIER4_Shift, 4   @ bitWidth 1 (Software Interrupt on line  4)  
        .equ EXTI_SWIER5_Shift, 5   @ bitWidth 1 (Software Interrupt on line  5)  
        .equ EXTI_SWIER6_Shift, 6   @ bitWidth 1 (Software Interrupt on line  6)  
        .equ EXTI_SWIER7_Shift, 7   @ bitWidth 1 (Software Interrupt on line  7)  
        .equ EXTI_SWIER8_Shift, 8   @ bitWidth 1 (Software Interrupt on line  8)  
        .equ EXTI_SWIER9_Shift, 9   @ bitWidth 1 (Software Interrupt on line  9)  
        .equ EXTI_SWIER10_Shift, 10   @ bitWidth 1 (Software Interrupt on line  10)  
        .equ EXTI_SWIER11_Shift, 11   @ bitWidth 1 (Software Interrupt on line  11)  
        .equ EXTI_SWIER12_Shift, 12   @ bitWidth 1 (Software Interrupt on line  12)  
        .equ EXTI_SWIER13_Shift, 13   @ bitWidth 1 (Software Interrupt on line  13)  
        .equ EXTI_SWIER14_Shift, 14   @ bitWidth 1 (Software Interrupt on line  14)  
        .equ EXTI_SWIER15_Shift, 15   @ bitWidth 1 (Software Interrupt on line  15)  
        .equ EXTI_SWIER16_Shift, 16   @ bitWidth 1 (Software Interrupt on line  16)  
        .equ EXTI_SWIER17_Shift, 17   @ bitWidth 1 (Software Interrupt on line  17)  
        .equ EXTI_SWIER19_Shift, 19   @ bitWidth 1 (Software Interrupt on line  19)  
 
    .equ EXTI_PR, EXTI_BASE + 0x14 @ (Pending register EXTI_PR) 
        .equ EXTI_PR0_Shift, 0   @ bitWidth 1 (Pending bit 0)  
        .equ EXTI_PR1_Shift, 1   @ bitWidth 1 (Pending bit 1)  
        .equ EXTI_PR2_Shift, 2   @ bitWidth 1 (Pending bit 2)  
        .equ EXTI_PR3_Shift, 3   @ bitWidth 1 (Pending bit 3)  
        .equ EXTI_PR4_Shift, 4   @ bitWidth 1 (Pending bit 4)  
        .equ EXTI_PR5_Shift, 5   @ bitWidth 1 (Pending bit 5)  
        .equ EXTI_PR6_Shift, 6   @ bitWidth 1 (Pending bit 6)  
        .equ EXTI_PR7_Shift, 7   @ bitWidth 1 (Pending bit 7)  
        .equ EXTI_PR8_Shift, 8   @ bitWidth 1 (Pending bit 8)  
        .equ EXTI_PR9_Shift, 9   @ bitWidth 1 (Pending bit 9)  
        .equ EXTI_PR10_Shift, 10   @ bitWidth 1 (Pending bit 10)  
        .equ EXTI_PR11_Shift, 11   @ bitWidth 1 (Pending bit 11)  
        .equ EXTI_PR12_Shift, 12   @ bitWidth 1 (Pending bit 12)  
        .equ EXTI_PR13_Shift, 13   @ bitWidth 1 (Pending bit 13)  
        .equ EXTI_PR14_Shift, 14   @ bitWidth 1 (Pending bit 14)  
        .equ EXTI_PR15_Shift, 15   @ bitWidth 1 (Pending bit 15)  
        .equ EXTI_PR16_Shift, 16   @ bitWidth 1 (Pending bit 16)  
        .equ EXTI_PR17_Shift, 17   @ bitWidth 1 (Pending bit 17)  
        .equ EXTI_PR19_Shift, 19   @ bitWidth 1 (Pending bit 19)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E100 @ (Nested Vectored Interrupt  Controller) 
    .equ NVIC_ISER, NVIC_BASE + 0x0 @ (Interrupt Set Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER, NVIC_BASE + 0x80 @ (Interrupt Clear Enable  Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR, NVIC_BASE + 0x100 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR, NVIC_BASE + 0x180 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x300 @ (Interrupt Priority Register 0) 
        .equ NVIC_PRI_00_Shift, 6   @ bitWidth 2 (PRI_00)  
        .equ NVIC_PRI_01_Shift, 14   @ bitWidth 2 (PRI_01)  
        .equ NVIC_PRI_02_Shift, 22   @ bitWidth 2 (PRI_02)  
        .equ NVIC_PRI_03_Shift, 30   @ bitWidth 2 (PRI_03)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x304 @ (Interrupt Priority Register 1) 
        .equ NVIC_PRI_40_Shift, 6   @ bitWidth 2 (PRI_40)  
        .equ NVIC_PRI_41_Shift, 14   @ bitWidth 2 (PRI_41)  
        .equ NVIC_PRI_42_Shift, 22   @ bitWidth 2 (PRI_42)  
        .equ NVIC_PRI_43_Shift, 30   @ bitWidth 2 (PRI_43)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x308 @ (Interrupt Priority Register 2) 
        .equ NVIC_PRI_80_Shift, 6   @ bitWidth 2 (PRI_80)  
        .equ NVIC_PRI_81_Shift, 14   @ bitWidth 2 (PRI_81)  
        .equ NVIC_PRI_82_Shift, 22   @ bitWidth 2 (PRI_82)  
        .equ NVIC_PRI_83_Shift, 30   @ bitWidth 2 (PRI_83)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x30C @ (Interrupt Priority Register 3) 
        .equ NVIC_PRI_120_Shift, 6   @ bitWidth 2 (PRI_120)  
        .equ NVIC_PRI_121_Shift, 14   @ bitWidth 2 (PRI_121)  
        .equ NVIC_PRI_122_Shift, 22   @ bitWidth 2 (PRI_122)  
        .equ NVIC_PRI_123_Shift, 30   @ bitWidth 2 (PRI_123)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x310 @ (Interrupt Priority Register 4) 
        .equ NVIC_PRI_160_Shift, 6   @ bitWidth 2 (PRI_160)  
        .equ NVIC_PRI_161_Shift, 14   @ bitWidth 2 (PRI_161)  
        .equ NVIC_PRI_162_Shift, 22   @ bitWidth 2 (PRI_162)  
        .equ NVIC_PRI_163_Shift, 30   @ bitWidth 2 (PRI_163)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x314 @ (Interrupt Priority Register 5) 
        .equ NVIC_PRI_200_Shift, 6   @ bitWidth 2 (PRI_200)  
        .equ NVIC_PRI_201_Shift, 14   @ bitWidth 2 (PRI_201)  
        .equ NVIC_PRI_202_Shift, 22   @ bitWidth 2 (PRI_202)  
        .equ NVIC_PRI_203_Shift, 30   @ bitWidth 2 (PRI_203)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x318 @ (Interrupt Priority Register 6) 
        .equ NVIC_PRI_240_Shift, 6   @ bitWidth 2 (PRI_240)  
        .equ NVIC_PRI_241_Shift, 14   @ bitWidth 2 (PRI_241)  
        .equ NVIC_PRI_242_Shift, 22   @ bitWidth 2 (PRI_242)  
        .equ NVIC_PRI_243_Shift, 30   @ bitWidth 2 (PRI_243)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x31C @ (Interrupt Priority Register 7) 
        .equ NVIC_PRI_280_Shift, 6   @ bitWidth 2 (PRI_280)  
        .equ NVIC_PRI_281_Shift, 14   @ bitWidth 2 (PRI_281)  
        .equ NVIC_PRI_282_Shift, 22   @ bitWidth 2 (PRI_282)  
        .equ NVIC_PRI_283_Shift, 30   @ bitWidth 2 (PRI_283)  
 

@=========================== DMA ===========================@
.equ DMA_BASE, 0x40020000 @ (DMA controller) 
    .equ DMA_ISR, DMA_BASE + 0x0 @ (DMA interrupt status register  DMA_ISR) 
        .equ DMA_GIF1_Shift, 0   @ bitWidth 1 (Channel 1 Global interrupt  flag)  
        .equ DMA_TCIF1_Shift, 1   @ bitWidth 1 (Channel 1 Transfer Complete  flag)  
        .equ DMA_HTIF1_Shift, 2   @ bitWidth 1 (Channel 1 Half Transfer Complete  flag)  
        .equ DMA_TEIF1_Shift, 3   @ bitWidth 1 (Channel 1 Transfer Error  flag)  
        .equ DMA_GIF2_Shift, 4   @ bitWidth 1 (Channel 2 Global interrupt  flag)  
        .equ DMA_TCIF2_Shift, 5   @ bitWidth 1 (Channel 2 Transfer Complete  flag)  
        .equ DMA_HTIF2_Shift, 6   @ bitWidth 1 (Channel 2 Half Transfer Complete  flag)  
        .equ DMA_TEIF2_Shift, 7   @ bitWidth 1 (Channel 2 Transfer Error  flag)  
        .equ DMA_GIF3_Shift, 8   @ bitWidth 1 (Channel 3 Global interrupt  flag)  
        .equ DMA_TCIF3_Shift, 9   @ bitWidth 1 (Channel 3 Transfer Complete  flag)  
        .equ DMA_HTIF3_Shift, 10   @ bitWidth 1 (Channel 3 Half Transfer Complete  flag)  
        .equ DMA_TEIF3_Shift, 11   @ bitWidth 1 (Channel 3 Transfer Error  flag)  
        .equ DMA_GIF4_Shift, 12   @ bitWidth 1 (Channel 4 Global interrupt  flag)  
        .equ DMA_TCIF4_Shift, 13   @ bitWidth 1 (Channel 4 Transfer Complete  flag)  
        .equ DMA_HTIF4_Shift, 14   @ bitWidth 1 (Channel 4 Half Transfer Complete  flag)  
        .equ DMA_TEIF4_Shift, 15   @ bitWidth 1 (Channel 4 Transfer Error  flag)  
        .equ DMA_GIF5_Shift, 16   @ bitWidth 1 (Channel 5 Global interrupt  flag)  
        .equ DMA_TCIF5_Shift, 17   @ bitWidth 1 (Channel 5 Transfer Complete  flag)  
        .equ DMA_HTIF5_Shift, 18   @ bitWidth 1 (Channel 5 Half Transfer Complete  flag)  
        .equ DMA_TEIF5_Shift, 19   @ bitWidth 1 (Channel 5 Transfer Error  flag)  
        .equ DMA_GIF6_Shift, 20   @ bitWidth 1 (Channel 6 Global interrupt  flag)  
        .equ DMA_TCIF6_Shift, 21   @ bitWidth 1 (Channel 6 Transfer Complete  flag)  
        .equ DMA_HTIF6_Shift, 22   @ bitWidth 1 (Channel 6 Half Transfer Complete  flag)  
        .equ DMA_TEIF6_Shift, 23   @ bitWidth 1 (Channel 6 Transfer Error  flag)  
        .equ DMA_GIF7_Shift, 24   @ bitWidth 1 (Channel 7 Global interrupt  flag)  
        .equ DMA_TCIF7_Shift, 25   @ bitWidth 1 (Channel 7 Transfer Complete  flag)  
        .equ DMA_HTIF7_Shift, 26   @ bitWidth 1 (Channel 7 Half Transfer Complete  flag)  
        .equ DMA_TEIF7_Shift, 27   @ bitWidth 1 (Channel 7 Transfer Error  flag)  
 
    .equ DMA_IFCR, DMA_BASE + 0x4 @ (DMA interrupt flag clear register  DMA_IFCR) 
        .equ DMA_CGIF1_Shift, 0   @ bitWidth 1 (Channel 1 Global interrupt  clear)  
        .equ DMA_CTCIF1_Shift, 1   @ bitWidth 1 (Channel 1 Transfer Complete  clear)  
        .equ DMA_CHTIF1_Shift, 2   @ bitWidth 1 (Channel 1 Half Transfer  clear)  
        .equ DMA_CTEIF1_Shift, 3   @ bitWidth 1 (Channel 1 Transfer Error  clear)  
        .equ DMA_CGIF2_Shift, 4   @ bitWidth 1 (Channel 2 Global interrupt  clear)  
        .equ DMA_CTCIF2_Shift, 5   @ bitWidth 1 (Channel 2 Transfer Complete  clear)  
        .equ DMA_CHTIF2_Shift, 6   @ bitWidth 1 (Channel 2 Half Transfer  clear)  
        .equ DMA_CTEIF2_Shift, 7   @ bitWidth 1 (Channel 2 Transfer Error  clear)  
        .equ DMA_CGIF3_Shift, 8   @ bitWidth 1 (Channel 3 Global interrupt  clear)  
        .equ DMA_CTCIF3_Shift, 9   @ bitWidth 1 (Channel 3 Transfer Complete  clear)  
        .equ DMA_CHTIF3_Shift, 10   @ bitWidth 1 (Channel 3 Half Transfer  clear)  
        .equ DMA_CTEIF3_Shift, 11   @ bitWidth 1 (Channel 3 Transfer Error  clear)  
        .equ DMA_CGIF4_Shift, 12   @ bitWidth 1 (Channel 4 Global interrupt  clear)  
        .equ DMA_CTCIF4_Shift, 13   @ bitWidth 1 (Channel 4 Transfer Complete  clear)  
        .equ DMA_CHTIF4_Shift, 14   @ bitWidth 1 (Channel 4 Half Transfer  clear)  
        .equ DMA_CTEIF4_Shift, 15   @ bitWidth 1 (Channel 4 Transfer Error  clear)  
        .equ DMA_CGIF5_Shift, 16   @ bitWidth 1 (Channel 5 Global interrupt  clear)  
        .equ DMA_CTCIF5_Shift, 17   @ bitWidth 1 (Channel 5 Transfer Complete  clear)  
        .equ DMA_CHTIF5_Shift, 18   @ bitWidth 1 (Channel 5 Half Transfer  clear)  
        .equ DMA_CTEIF5_Shift, 19   @ bitWidth 1 (Channel 5 Transfer Error  clear)  
        .equ DMA_CGIF6_Shift, 20   @ bitWidth 1 (Channel 6 Global interrupt  clear)  
        .equ DMA_CTCIF6_Shift, 21   @ bitWidth 1 (Channel 6 Transfer Complete  clear)  
        .equ DMA_CHTIF6_Shift, 22   @ bitWidth 1 (Channel 6 Half Transfer  clear)  
        .equ DMA_CTEIF6_Shift, 23   @ bitWidth 1 (Channel 6 Transfer Error  clear)  
        .equ DMA_CGIF7_Shift, 24   @ bitWidth 1 (Channel 7 Global interrupt  clear)  
        .equ DMA_CTCIF7_Shift, 25   @ bitWidth 1 (Channel 7 Transfer Complete  clear)  
        .equ DMA_CHTIF7_Shift, 26   @ bitWidth 1 (Channel 7 Half Transfer  clear)  
        .equ DMA_CTEIF7_Shift, 27   @ bitWidth 1 (Channel 7 Transfer Error  clear)  
 
    .equ DMA_CCR1, DMA_BASE + 0x8 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR1, DMA_BASE + 0xC @ (DMA channel 1 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR1, DMA_BASE + 0x10 @ (DMA channel 1 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR1, DMA_BASE + 0x14 @ (DMA channel 1 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA_CCR2, DMA_BASE + 0x1C @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR2, DMA_BASE + 0x20 @ (DMA channel 2 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR2, DMA_BASE + 0x24 @ (DMA channel 2 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR2, DMA_BASE + 0x28 @ (DMA channel 2 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA_CCR3, DMA_BASE + 0x30 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR3, DMA_BASE + 0x34 @ (DMA channel 3 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR3, DMA_BASE + 0x38 @ (DMA channel 3 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR3, DMA_BASE + 0x3C @ (DMA channel 3 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA_CCR4, DMA_BASE + 0x44 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR4, DMA_BASE + 0x48 @ (DMA channel 4 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR4, DMA_BASE + 0x4C @ (DMA channel 4 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR4, DMA_BASE + 0x50 @ (DMA channel 4 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA_CCR5, DMA_BASE + 0x58 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR5, DMA_BASE + 0x5C @ (DMA channel 5 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR5, DMA_BASE + 0x60 @ (DMA channel 5 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR5, DMA_BASE + 0x64 @ (DMA channel 5 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA_CCR6, DMA_BASE + 0x6C @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR6, DMA_BASE + 0x70 @ (DMA channel 6 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR6, DMA_BASE + 0x74 @ (DMA channel 6 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR6, DMA_BASE + 0x78 @ (DMA channel 6 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA_CCR7, DMA_BASE + 0x80 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA_CNDTR7, DMA_BASE + 0x84 @ (DMA channel 7 number of data  register) 
        .equ DMA_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA_CPAR7, DMA_BASE + 0x88 @ (DMA channel 7 peripheral address  register) 
        .equ DMA_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA_CMAR7, DMA_BASE + 0x8C @ (DMA channel 7 memory address  register) 
        .equ DMA_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x40021000 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (Clock control register) 
        .equ RCC_HSION_Shift, 0   @ bitWidth 1 (Internal High Speed clock  enable)  
        .equ RCC_HSIRDY_Shift, 1   @ bitWidth 1 (Internal High Speed clock ready  flag)  
        .equ RCC_HSITRIM_Shift, 3   @ bitWidth 5 (Internal High Speed clock  trimming)  
        .equ RCC_HSICAL_Shift, 8   @ bitWidth 8 (Internal High Speed clock  Calibration)  
        .equ RCC_HSEON_Shift, 16   @ bitWidth 1 (External High Speed clock  enable)  
        .equ RCC_HSERDY_Shift, 17   @ bitWidth 1 (External High Speed clock ready  flag)  
        .equ RCC_HSEBYP_Shift, 18   @ bitWidth 1 (External High Speed clock  Bypass)  
        .equ RCC_CSSON_Shift, 19   @ bitWidth 1 (Clock Security System  enable)  
        .equ RCC_PLLON_Shift, 24   @ bitWidth 1 (PLL enable)  
        .equ RCC_PLLRDY_Shift, 25   @ bitWidth 1 (PLL clock ready flag)  
 
    .equ RCC_CFGR, RCC_BASE + 0x4 @ (Clock configuration register  RCC_CFGR) 
        .equ RCC_SW_Shift, 0   @ bitWidth 2 (System clock Switch)  
        .equ RCC_SWS_Shift, 2   @ bitWidth 2 (System Clock Switch Status)  
        .equ RCC_HPRE_Shift, 4   @ bitWidth 4 (AHB prescaler)  
        .equ RCC_PPRE_Shift, 8   @ bitWidth 3 (APB Low speed prescaler  APB1)  
        .equ RCC_ADCPRE_Shift, 14   @ bitWidth 1 (ADC prescaler)  
        .equ RCC_PLLSRC_Shift, 15   @ bitWidth 2 (PLL input clock source)  
        .equ RCC_PLLXTPRE_Shift, 17   @ bitWidth 1 (HSE divider for PLL entry)  
        .equ RCC_PLLMUL_Shift, 18   @ bitWidth 4 (PLL Multiplication Factor)  
        .equ RCC_MCO_Shift, 24   @ bitWidth 3 (Microcontroller clock  output)  
        .equ RCC_MCOPRE_Shift, 28   @ bitWidth 3 (Microcontroller Clock Output  Prescaler)  
        .equ RCC_PLLNODIV_Shift, 31   @ bitWidth 1 (PLL clock not divided for  MCO)  
 
    .equ RCC_CIR, RCC_BASE + 0x8 @ (Clock interrupt register  RCC_CIR) 
        .equ RCC_LSIRDYF_Shift, 0   @ bitWidth 1 (LSI Ready Interrupt flag)  
        .equ RCC_LSERDYF_Shift, 1   @ bitWidth 1 (LSE Ready Interrupt flag)  
        .equ RCC_HSIRDYF_Shift, 2   @ bitWidth 1 (HSI Ready Interrupt flag)  
        .equ RCC_HSERDYF_Shift, 3   @ bitWidth 1 (HSE Ready Interrupt flag)  
        .equ RCC_PLLRDYF_Shift, 4   @ bitWidth 1 (PLL Ready Interrupt flag)  
        .equ RCC_HSI14RDYF_Shift, 5   @ bitWidth 1 (HSI14 ready interrupt flag)  
        .equ RCC_HSI48RDYF_Shift, 6   @ bitWidth 1 (HSI48 ready interrupt flag)  
        .equ RCC_CSSF_Shift, 7   @ bitWidth 1 (Clock Security System Interrupt  flag)  
        .equ RCC_LSIRDYIE_Shift, 8   @ bitWidth 1 (LSI Ready Interrupt Enable)  
        .equ RCC_LSERDYIE_Shift, 9   @ bitWidth 1 (LSE Ready Interrupt Enable)  
        .equ RCC_HSIRDYIE_Shift, 10   @ bitWidth 1 (HSI Ready Interrupt Enable)  
        .equ RCC_HSERDYIE_Shift, 11   @ bitWidth 1 (HSE Ready Interrupt Enable)  
        .equ RCC_PLLRDYIE_Shift, 12   @ bitWidth 1 (PLL Ready Interrupt Enable)  
        .equ RCC_HSI14RDYE_Shift, 13   @ bitWidth 1 (HSI14 ready interrupt  enable)  
        .equ RCC_HSI48RDYIE_Shift, 14   @ bitWidth 1 (HSI48 ready interrupt  enable)  
        .equ RCC_LSIRDYC_Shift, 16   @ bitWidth 1 (LSI Ready Interrupt Clear)  
        .equ RCC_LSERDYC_Shift, 17   @ bitWidth 1 (LSE Ready Interrupt Clear)  
        .equ RCC_HSIRDYC_Shift, 18   @ bitWidth 1 (HSI Ready Interrupt Clear)  
        .equ RCC_HSERDYC_Shift, 19   @ bitWidth 1 (HSE Ready Interrupt Clear)  
        .equ RCC_PLLRDYC_Shift, 20   @ bitWidth 1 (PLL Ready Interrupt Clear)  
        .equ RCC_HSI14RDYC_Shift, 21   @ bitWidth 1 (HSI 14 MHz Ready Interrupt  Clear)  
        .equ RCC_HSI48RDYC_Shift, 22   @ bitWidth 1 (HSI48 Ready Interrupt  Clear)  
        .equ RCC_CSSC_Shift, 23   @ bitWidth 1 (Clock security system interrupt  clear)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0xC @ (APB2 peripheral reset register  RCC_APB2RSTR) 
        .equ RCC_SYSCFGRST_Shift, 0   @ bitWidth 1 (SYSCFG and COMP reset)  
        .equ RCC_ADCRST_Shift, 9   @ bitWidth 1 (ADC interface reset)  
        .equ RCC_TIM1RST_Shift, 11   @ bitWidth 1 (TIM1 timer reset)  
        .equ RCC_SPI1RST_Shift, 12   @ bitWidth 1 (SPI 1 reset)  
        .equ RCC_USART1RST_Shift, 14   @ bitWidth 1 (USART1 reset)  
        .equ RCC_TIM15RST_Shift, 16   @ bitWidth 1 (TIM15 timer reset)  
        .equ RCC_TIM16RST_Shift, 17   @ bitWidth 1 (TIM16 timer reset)  
        .equ RCC_TIM17RST_Shift, 18   @ bitWidth 1 (TIM17 timer reset)  
        .equ RCC_DBGMCURST_Shift, 22   @ bitWidth 1 (Debug MCU reset)  
 
    .equ RCC_APB1RSTR, RCC_BASE + 0x10 @ (APB1 peripheral reset register  RCC_APB1RSTR) 
        .equ RCC_TIM3RST_Shift, 1   @ bitWidth 1 (Timer 3 reset)  
        .equ RCC_TIM6RST_Shift, 4   @ bitWidth 1 (Timer 6 reset)  
        .equ RCC_TIM14RST_Shift, 8   @ bitWidth 1 (Timer 14 reset)  
        .equ RCC_WWDGRST_Shift, 11   @ bitWidth 1 (Window watchdog reset)  
        .equ RCC_SPI2RST_Shift, 14   @ bitWidth 1 (SPI2 reset)  
        .equ RCC_USART2RST_Shift, 17   @ bitWidth 1 (USART 2 reset)  
        .equ RCC_I2C1RST_Shift, 21   @ bitWidth 1 (I2C1 reset)  
        .equ RCC_I2C2RST_Shift, 22   @ bitWidth 1 (I2C2 reset)  
        .equ RCC_PWRRST_Shift, 28   @ bitWidth 1 (Power interface reset)  
 
    .equ RCC_AHBENR, RCC_BASE + 0x14 @ (AHB Peripheral Clock enable register  RCC_AHBENR) 
        .equ RCC_DMAEN_Shift, 0   @ bitWidth 1 (DMA1 clock enable)  
        .equ RCC_SRAMEN_Shift, 2   @ bitWidth 1 (SRAM interface clock  enable)  
        .equ RCC_FLITFEN_Shift, 4   @ bitWidth 1 (FLITF clock enable)  
        .equ RCC_CRCEN_Shift, 6   @ bitWidth 1 (CRC clock enable)  
        .equ RCC_IOPAEN_Shift, 17   @ bitWidth 1 (I/O port A clock enable)  
        .equ RCC_IOPBEN_Shift, 18   @ bitWidth 1 (I/O port B clock enable)  
        .equ RCC_IOPCEN_Shift, 19   @ bitWidth 1 (I/O port C clock enable)  
        .equ RCC_IOPDEN_Shift, 20   @ bitWidth 1 (I/O port D clock enable)  
        .equ RCC_IOPFEN_Shift, 22   @ bitWidth 1 (I/O port F clock enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x18 @ (APB2 peripheral clock enable register  RCC_APB2ENR) 
        .equ RCC_SYSCFGEN_Shift, 0   @ bitWidth 1 (SYSCFG clock enable)  
        .equ RCC_ADCEN_Shift, 9   @ bitWidth 1 (ADC 1 interface clock  enable)  
        .equ RCC_TIM1EN_Shift, 11   @ bitWidth 1 (TIM1 Timer clock enable)  
        .equ RCC_SPI1EN_Shift, 12   @ bitWidth 1 (SPI 1 clock enable)  
        .equ RCC_USART1EN_Shift, 14   @ bitWidth 1 (USART1 clock enable)  
        .equ RCC_TIM15EN_Shift, 16   @ bitWidth 1 (TIM15 timer clock enable)  
        .equ RCC_TIM16EN_Shift, 17   @ bitWidth 1 (TIM16 timer clock enable)  
        .equ RCC_TIM17EN_Shift, 18   @ bitWidth 1 (TIM17 timer clock enable)  
        .equ RCC_DBGMCUEN_Shift, 22   @ bitWidth 1 (MCU debug module clock  enable)  
 
    .equ RCC_APB1ENR, RCC_BASE + 0x1C @ (APB1 peripheral clock enable register  RCC_APB1ENR) 
        .equ RCC_TIM3EN_Shift, 1   @ bitWidth 1 (Timer 3 clock enable)  
        .equ RCC_TIM6EN_Shift, 4   @ bitWidth 1 (Timer 6 clock enable)  
        .equ RCC_TIM14EN_Shift, 8   @ bitWidth 1 (Timer 14 clock enable)  
        .equ RCC_WWDGEN_Shift, 11   @ bitWidth 1 (Window watchdog clock  enable)  
        .equ RCC_SPI2EN_Shift, 14   @ bitWidth 1 (SPI 2 clock enable)  
        .equ RCC_USART2EN_Shift, 17   @ bitWidth 1 (USART 2 clock enable)  
        .equ RCC_I2C1EN_Shift, 21   @ bitWidth 1 (I2C 1 clock enable)  
        .equ RCC_I2C2EN_Shift, 22   @ bitWidth 1 (I2C 2 clock enable)  
        .equ RCC_PWREN_Shift, 28   @ bitWidth 1 (Power interface clock  enable)  
 
    .equ RCC_BDCR, RCC_BASE + 0x20 @ (Backup domain control register  RCC_BDCR) 
        .equ RCC_LSEON_Shift, 0   @ bitWidth 1 (External Low Speed oscillator  enable)  
        .equ RCC_LSERDY_Shift, 1   @ bitWidth 1 (External Low Speed oscillator  ready)  
        .equ RCC_LSEBYP_Shift, 2   @ bitWidth 1 (External Low Speed oscillator  bypass)  
        .equ RCC_LSEDRV_Shift, 3   @ bitWidth 2 (LSE oscillator drive  capability)  
        .equ RCC_RTCSEL_Shift, 8   @ bitWidth 2 (RTC clock source selection)  
        .equ RCC_RTCEN_Shift, 15   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_BDRST_Shift, 16   @ bitWidth 1 (Backup domain software  reset)  
 
    .equ RCC_CSR, RCC_BASE + 0x24 @ (Control/status register  RCC_CSR) 
        .equ RCC_LSION_Shift, 0   @ bitWidth 1 (Internal low speed oscillator  enable)  
        .equ RCC_LSIRDY_Shift, 1   @ bitWidth 1 (Internal low speed oscillator  ready)  
        .equ RCC_RMVF_Shift, 24   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_OBLRSTF_Shift, 25   @ bitWidth 1 (Option byte loader reset  flag)  
        .equ RCC_PINRSTF_Shift, 26   @ bitWidth 1 (PIN reset flag)  
        .equ RCC_PORRSTF_Shift, 27   @ bitWidth 1 (POR/PDR reset flag)  
        .equ RCC_SFTRSTF_Shift, 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_IWDGRSTF_Shift, 29   @ bitWidth 1 (Independent watchdog reset  flag)  
        .equ RCC_WWDGRSTF_Shift, 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_LPWRRSTF_Shift, 31   @ bitWidth 1 (Low-power reset flag)  
 
    .equ RCC_AHBRSTR, RCC_BASE + 0x28 @ (AHB peripheral reset register) 
        .equ RCC_IOPARST_Shift, 17   @ bitWidth 1 (I/O port A reset)  
        .equ RCC_IOPBRST_Shift, 18   @ bitWidth 1 (I/O port B reset)  
        .equ RCC_IOPCRST_Shift, 19   @ bitWidth 1 (I/O port C reset)  
        .equ RCC_IOPDRST_Shift, 20   @ bitWidth 1 (I/O port D reset)  
        .equ RCC_IOPFRST_Shift, 22   @ bitWidth 1 (I/O port F reset)  
 
    .equ RCC_CFGR2, RCC_BASE + 0x2C @ (Clock configuration register 2) 
        .equ RCC_PREDIV_Shift, 0   @ bitWidth 4 (PREDIV division factor)  
 
    .equ RCC_CFGR3, RCC_BASE + 0x30 @ (Clock configuration register 3) 
        .equ RCC_USART1SW_Shift, 0   @ bitWidth 2 (USART1 clock source  selection)  
        .equ RCC_I2C1SW_Shift, 4   @ bitWidth 1 (I2C1 clock source  selection)  
        .equ RCC_ADCSW_Shift, 8   @ bitWidth 1 (ADC clock source selection)  
        .equ RCC_USART2SW_Shift, 16   @ bitWidth 2 (USART2 clock source  selection)  
 
    .equ RCC_CR2, RCC_BASE + 0x34 @ (Clock control register 2) 
        .equ RCC_HSI14ON_Shift, 0   @ bitWidth 1 (HSI14 clock enable)  
        .equ RCC_HSI14RDY_Shift, 1   @ bitWidth 1 (HR14 clock ready flag)  
        .equ RCC_HSI14DIS_Shift, 2   @ bitWidth 1 (HSI14 clock request from ADC  disable)  
        .equ RCC_HSI14TRIM_Shift, 3   @ bitWidth 5 (HSI14 clock trimming)  
        .equ RCC_HSI14CAL_Shift, 8   @ bitWidth 8 (HSI14 clock calibration)  
        .equ RCC_HSI48ON_Shift, 16   @ bitWidth 1 (HSI48 clock enable)  
        .equ RCC_HSI48RDY_Shift, 17   @ bitWidth 1 (HSI48 clock ready flag)  
        .equ RCC_HSI48CAL_Shift, 24   @ bitWidth 1 (HSI48 factory clock  calibration)  
 

@=========================== SYSCFG ===========================@
.equ SYSCFG_BASE, 0x40010000 @ (System configuration controller) 
    .equ SYSCFG_CFGR1, SYSCFG_BASE + 0x0 @ (configuration register 1) 
        .equ SYSCFG_MEM_MODE_Shift, 0   @ bitWidth 2 (Memory mapping selection  bits)  
        .equ SYSCFG_ADC_DMA_RMP_Shift, 8   @ bitWidth 1 (ADC DMA remapping bit)  
        .equ SYSCFG_USART1_TX_DMA_RMP_Shift, 9   @ bitWidth 1 (USART1_TX DMA remapping  bit)  
        .equ SYSCFG_USART1_RX_DMA_RMP_Shift, 10   @ bitWidth 1 (USART1_RX DMA request remapping  bit)  
        .equ SYSCFG_TIM16_DMA_RMP_Shift, 11   @ bitWidth 1 (TIM16 DMA request remapping  bit)  
        .equ SYSCFG_TIM17_DMA_RMP_Shift, 12   @ bitWidth 1 (TIM17 DMA request remapping  bit)  
        .equ SYSCFG_I2C_PB6_FM_Shift, 16   @ bitWidth 1 (Fast Mode Plus FM plus driving  capability activation bits.)  
        .equ SYSCFG_I2C_PB7_FM_Shift, 17   @ bitWidth 1 (Fast Mode Plus FM+ driving capability  activation bits.)  
        .equ SYSCFG_I2C_PB8_FM_Shift, 18   @ bitWidth 1 (Fast Mode Plus FM+ driving capability  activation bits.)  
        .equ SYSCFG_I2C_PB9_FM_Shift, 19   @ bitWidth 1 (Fast Mode Plus FM+ driving capability  activation bits.)  
        .equ SYSCFG_I2C1_FM_plus_Shift, 20   @ bitWidth 1 (FM+ driving capability activation for  I2C1)  
        .equ SYSCFG_I2C2_FM_plus_Shift, 21   @ bitWidth 1 (FM+ driving capability activation for  I2C2)  
        .equ SYSCFG_SPI2_DMA_RMP_Shift, 24   @ bitWidth 1 (SPI2 DMA request remapping  bit)  
        .equ SYSCFG_USART2_DMA_RMP_Shift, 25   @ bitWidth 1 (USART2 DMA request remapping  bit)  
        .equ SYSCFG_USART3_DMA_RMP_Shift, 26   @ bitWidth 1 (USART3 DMA request remapping  bit)  
        .equ SYSCFG_I2C1_DMA_RMP_Shift, 27   @ bitWidth 1 (I2C1 DMA request remapping  bit)  
        .equ SYSCFG_TIM1_DMA_RMP_Shift, 28   @ bitWidth 1 (TIM1 DMA request remapping  bit)  
        .equ SYSCFG_TIM2_DMA_RMP_Shift, 29   @ bitWidth 1 (TIM2 DMA request remapping  bit)  
        .equ SYSCFG_TIM3_DMA_RMP_Shift, 30   @ bitWidth 1 (TIM3 DMA request remapping  bit)  
 
    .equ SYSCFG_EXTICR1, SYSCFG_BASE + 0x8 @ (external interrupt configuration register  1) 
        .equ SYSCFG_EXTI3_Shift, 12   @ bitWidth 4 (EXTI 3 configuration bits)  
        .equ SYSCFG_EXTI2_Shift, 8   @ bitWidth 4 (EXTI 2 configuration bits)  
        .equ SYSCFG_EXTI1_Shift, 4   @ bitWidth 4 (EXTI 1 configuration bits)  
        .equ SYSCFG_EXTI0_Shift, 0   @ bitWidth 4 (EXTI 0 configuration bits)  
 
    .equ SYSCFG_EXTICR2, SYSCFG_BASE + 0xC @ (external interrupt configuration register  2) 
        .equ SYSCFG_EXTI7_Shift, 12   @ bitWidth 4 (EXTI 7 configuration bits)  
        .equ SYSCFG_EXTI6_Shift, 8   @ bitWidth 4 (EXTI 6 configuration bits)  
        .equ SYSCFG_EXTI5_Shift, 4   @ bitWidth 4 (EXTI 5 configuration bits)  
        .equ SYSCFG_EXTI4_Shift, 0   @ bitWidth 4 (EXTI 4 configuration bits)  
 
    .equ SYSCFG_EXTICR3, SYSCFG_BASE + 0x10 @ (external interrupt configuration register  3) 
        .equ SYSCFG_EXTI11_Shift, 12   @ bitWidth 4 (EXTI 11 configuration bits)  
        .equ SYSCFG_EXTI10_Shift, 8   @ bitWidth 4 (EXTI 10 configuration bits)  
        .equ SYSCFG_EXTI9_Shift, 4   @ bitWidth 4 (EXTI 9 configuration bits)  
        .equ SYSCFG_EXTI8_Shift, 0   @ bitWidth 4 (EXTI 8 configuration bits)  
 
    .equ SYSCFG_EXTICR4, SYSCFG_BASE + 0x14 @ (external interrupt configuration register  4) 
        .equ SYSCFG_EXTI15_Shift, 12   @ bitWidth 4 (EXTI 15 configuration bits)  
        .equ SYSCFG_EXTI14_Shift, 8   @ bitWidth 4 (EXTI 14 configuration bits)  
        .equ SYSCFG_EXTI13_Shift, 4   @ bitWidth 4 (EXTI 13 configuration bits)  
        .equ SYSCFG_EXTI12_Shift, 0   @ bitWidth 4 (EXTI 12 configuration bits)  
 
    .equ SYSCFG_CFGR2, SYSCFG_BASE + 0x18 @ (configuration register 2) 
        .equ SYSCFG_SRAM_PEF_Shift, 8   @ bitWidth 1 (SRAM parity flag)  
        .equ SYSCFG_PVD_LOCK_Shift, 2   @ bitWidth 1 (PVD lock enable bit)  
        .equ SYSCFG_SRAM_PARITY_LOCK_Shift, 1   @ bitWidth 1 (SRAM parity lock bit)  
        .equ SYSCFG_LOCUP_LOCK_Shift, 0   @ bitWidth 1 (Cortex-M0 LOCKUP bit enable  bit)  
 

@=========================== ADC ===========================@
.equ ADC_BASE, 0x40012400 @ (Analog-to-digital converter) 
    .equ ADC_ISR, ADC_BASE + 0x0 @ (interrupt and status register) 
        .equ ADC_AWD_Shift, 7   @ bitWidth 1 (Analog watchdog flag)  
        .equ ADC_OVR_Shift, 4   @ bitWidth 1 (ADC overrun)  
        .equ ADC_EOS_Shift, 3   @ bitWidth 1 (End of sequence flag)  
        .equ ADC_EOC_Shift, 2   @ bitWidth 1 (End of conversion flag)  
        .equ ADC_EOSMP_Shift, 1   @ bitWidth 1 (End of sampling flag)  
        .equ ADC_ADRDY_Shift, 0   @ bitWidth 1 (ADC ready)  
 
    .equ ADC_IER, ADC_BASE + 0x4 @ (interrupt enable register) 
        .equ ADC_AWDIE_Shift, 7   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC_OVRIE_Shift, 4   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC_EOSIE_Shift, 3   @ bitWidth 1 (End of conversion sequence interrupt  enable)  
        .equ ADC_EOCIE_Shift, 2   @ bitWidth 1 (End of conversion interrupt  enable)  
        .equ ADC_EOSMPIE_Shift, 1   @ bitWidth 1 (End of sampling flag interrupt  enable)  
        .equ ADC_ADRDYIE_Shift, 0   @ bitWidth 1 (ADC ready interrupt enable)  
 
    .equ ADC_CR, ADC_BASE + 0x8 @ (control register) 
        .equ ADC_ADCAL_Shift, 31   @ bitWidth 1 (ADC calibration)  
        .equ ADC_ADSTP_Shift, 4   @ bitWidth 1 (ADC stop conversion  command)  
        .equ ADC_ADSTART_Shift, 2   @ bitWidth 1 (ADC start conversion  command)  
        .equ ADC_ADDIS_Shift, 1   @ bitWidth 1 (ADC disable command)  
        .equ ADC_ADEN_Shift, 0   @ bitWidth 1 (ADC enable command)  
 
    .equ ADC_CFGR1, ADC_BASE + 0xC @ (configuration register 1) 
        .equ ADC_AWDCH_Shift, 26   @ bitWidth 5 (Analog watchdog channel  selection)  
        .equ ADC_AWDEN_Shift, 23   @ bitWidth 1 (Analog watchdog enable)  
        .equ ADC_AWDSGL_Shift, 22   @ bitWidth 1 (Enable the watchdog on a single channel  or on all channels)  
        .equ ADC_DISCEN_Shift, 16   @ bitWidth 1 (Discontinuous mode)  
        .equ ADC_AUTOFF_Shift, 15   @ bitWidth 1 (Auto-off mode)  
        .equ ADC_AUTDLY_Shift, 14   @ bitWidth 1 (Auto-delayed conversion  mode)  
        .equ ADC_CONT_Shift, 13   @ bitWidth 1 (Single / continuous conversion  mode)  
        .equ ADC_OVRMOD_Shift, 12   @ bitWidth 1 (Overrun management mode)  
        .equ ADC_EXTEN_Shift, 10   @ bitWidth 2 (External trigger enable and polarity  selection)  
        .equ ADC_EXTSEL_Shift, 6   @ bitWidth 3 (External trigger selection)  
        .equ ADC_ALIGN_Shift, 5   @ bitWidth 1 (Data alignment)  
        .equ ADC_RES_Shift, 3   @ bitWidth 2 (Data resolution)  
        .equ ADC_SCANDIR_Shift, 2   @ bitWidth 1 (Scan sequence direction)  
        .equ ADC_DMACFG_Shift, 1   @ bitWidth 1 (Direct memery access  configuration)  
        .equ ADC_DMAEN_Shift, 0   @ bitWidth 1 (Direct memory access  enable)  
 
    .equ ADC_CFGR2, ADC_BASE + 0x10 @ (configuration register 2) 
        .equ ADC_JITOFF_D4_Shift, 31   @ bitWidth 1 (JITOFF_D4)  
        .equ ADC_JITOFF_D2_Shift, 30   @ bitWidth 1 (JITOFF_D2)  
 
    .equ ADC_SMPR, ADC_BASE + 0x14 @ (sampling time register) 
        .equ ADC_SMPR_Shift, 0   @ bitWidth 3 (Sampling time selection)  
 
    .equ ADC_TR, ADC_BASE + 0x20 @ (watchdog threshold register) 
        .equ ADC_HT_Shift, 16   @ bitWidth 12 (Analog watchdog higher  threshold)  
        .equ ADC_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC_CHSELR, ADC_BASE + 0x28 @ (channel selection register) 
        .equ ADC_CHSEL18_Shift, 18   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL17_Shift, 17   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL16_Shift, 16   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL15_Shift, 15   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL14_Shift, 14   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL13_Shift, 13   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL12_Shift, 12   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL11_Shift, 11   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL10_Shift, 10   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL9_Shift, 9   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL8_Shift, 8   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL7_Shift, 7   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL6_Shift, 6   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL5_Shift, 5   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL4_Shift, 4   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL3_Shift, 3   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL2_Shift, 2   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL1_Shift, 1   @ bitWidth 1 (Channel-x selection)  
        .equ ADC_CHSEL0_Shift, 0   @ bitWidth 1 (Channel-x selection)  
 
    .equ ADC_DR, ADC_BASE + 0x40 @ (data register) 
        .equ ADC_DATA_Shift, 0   @ bitWidth 16 (Converted data)  
 
    .equ ADC_CCR, ADC_BASE + 0x308 @ (common configuration register) 
        .equ ADC_VBATEN_Shift, 24   @ bitWidth 1 (VBAT enable)  
        .equ ADC_TSEN_Shift, 23   @ bitWidth 1 (Temperature sensor enable)  
        .equ ADC_VREFEN_Shift, 22   @ bitWidth 1 (Temperature sensor and VREFINT  enable)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40013800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART1_CR1, USART1_BASE + 0x0 @ (Control register 1) 
        .equ USART1_UE_Shift, 0   @ bitWidth 1 (USART enable)  
        .equ USART1_UESM_Shift, 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART1_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART1_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART1_TXEIE_Shift, 7   @ bitWidth 1 (interrupt enable)  
        .equ USART1_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_WAKE_Shift, 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART1_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART1_MME_Shift, 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART1_CMIE_Shift, 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ USART1_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART1_DEDT_Shift, 16   @ bitWidth 5 (Driver Enable deassertion  time)  
        .equ USART1_DEAT_Shift, 21   @ bitWidth 5 (Driver Enable assertion  time)  
        .equ USART1_RTOIE_Shift, 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ USART1_EOBIE_Shift, 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ USART1_M1_Shift, 28   @ bitWidth 1 (Word length)  
 
    .equ USART1_CR2, USART1_BASE + 0x4 @ (Control register 2) 
        .equ USART1_ADD4_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_ADD0_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_RTOEN_Shift, 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART1_ABRMOD_Shift, 21   @ bitWidth 2 (Auto baud rate mode)  
        .equ USART1_ABREN_Shift, 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART1_MSBFIRST_Shift, 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART1_DATAINV_Shift, 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART1_TXINV_Shift, 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ USART1_RXINV_Shift, 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ USART1_SWAP_Shift, 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART1_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART1_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART1_LBDL_Shift, 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART1_ADDM7_Shift, 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ USART1_CR3, USART1_BASE + 0x8 @ (Control register 3) 
        .equ USART1_WUFIE_Shift, 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ USART1_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ USART1_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART1_DEP_Shift, 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ USART1_DEM_Shift, 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART1_DDRE_Shift, 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ USART1_OVRDIS_Shift, 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART1_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART1_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART1_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART1_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_BRR, USART1_BASE + 0xC @ (Baud rate register) 
        .equ USART1_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART1_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART1_GTPR, USART1_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ USART1_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART1_RTOR, USART1_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART1_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART1_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART1_RQR, USART1_BASE + 0x18 @ (Request register) 
        .equ USART1_TXFRQ_Shift, 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ USART1_RXFRQ_Shift, 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART1_MMRQ_Shift, 2   @ bitWidth 1 (Mute mode request)  
        .equ USART1_SBKRQ_Shift, 1   @ bitWidth 1 (Send break request)  
        .equ USART1_ABRRQ_Shift, 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART1_ISR, USART1_BASE + 0x1C @ (Interrupt & status  register) 
        .equ USART1_REACK_Shift, 22   @ bitWidth 1 (Receive enable acknowledge  flag)  
        .equ USART1_TEACK_Shift, 21   @ bitWidth 1 (Transmit enable acknowledge  flag)  
        .equ USART1_WUF_Shift, 20   @ bitWidth 1 (Wakeup from Stop mode flag)  
        .equ USART1_RWU_Shift, 19   @ bitWidth 1 (Receiver wakeup from Mute  mode)  
        .equ USART1_SBKF_Shift, 18   @ bitWidth 1 (Send break flag)  
        .equ USART1_CMF_Shift, 17   @ bitWidth 1 (character match flag)  
        .equ USART1_BUSY_Shift, 16   @ bitWidth 1 (Busy flag)  
        .equ USART1_ABRF_Shift, 15   @ bitWidth 1 (Auto baud rate flag)  
        .equ USART1_ABRE_Shift, 14   @ bitWidth 1 (Auto baud rate error)  
        .equ USART1_EOBF_Shift, 12   @ bitWidth 1 (End of block flag)  
        .equ USART1_RTOF_Shift, 11   @ bitWidth 1 (Receiver timeout)  
        .equ USART1_CTS_Shift, 10   @ bitWidth 1 (CTS flag)  
        .equ USART1_CTSIF_Shift, 9   @ bitWidth 1 (CTS interrupt flag)  
        .equ USART1_LBDF_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART1_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART1_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART1_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART1_IDLE_Shift, 4   @ bitWidth 1 (Idle line detected)  
        .equ USART1_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART1_NF_Shift, 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART1_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART1_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART1_ICR, USART1_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART1_WUCF_Shift, 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ USART1_CMCF_Shift, 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART1_EOBCF_Shift, 12   @ bitWidth 1 (End of timeout clear flag)  
        .equ USART1_RTOCF_Shift, 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ USART1_CTSCF_Shift, 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART1_LBDCF_Shift, 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ USART1_TCCF_Shift, 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ USART1_IDLECF_Shift, 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ USART1_ORECF_Shift, 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART1_NCF_Shift, 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART1_FECF_Shift, 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART1_PECF_Shift, 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART1_RDR, USART1_BASE + 0x24 @ (Receive data register) 
        .equ USART1_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART1_TDR, USART1_BASE + 0x28 @ (Transmit data register) 
        .equ USART1_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART2_CR1, USART2_BASE + 0x0 @ (Control register 1) 
        .equ USART2_UE_Shift, 0   @ bitWidth 1 (USART enable)  
        .equ USART2_UESM_Shift, 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART2_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART2_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART2_TXEIE_Shift, 7   @ bitWidth 1 (interrupt enable)  
        .equ USART2_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_WAKE_Shift, 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART2_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART2_MME_Shift, 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART2_CMIE_Shift, 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ USART2_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART2_DEDT_Shift, 16   @ bitWidth 5 (Driver Enable deassertion  time)  
        .equ USART2_DEAT_Shift, 21   @ bitWidth 5 (Driver Enable assertion  time)  
        .equ USART2_RTOIE_Shift, 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ USART2_EOBIE_Shift, 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ USART2_M1_Shift, 28   @ bitWidth 1 (Word length)  
 
    .equ USART2_CR2, USART2_BASE + 0x4 @ (Control register 2) 
        .equ USART2_ADD4_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_ADD0_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_RTOEN_Shift, 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART2_ABRMOD_Shift, 21   @ bitWidth 2 (Auto baud rate mode)  
        .equ USART2_ABREN_Shift, 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART2_MSBFIRST_Shift, 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART2_DATAINV_Shift, 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART2_TXINV_Shift, 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ USART2_RXINV_Shift, 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ USART2_SWAP_Shift, 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART2_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART2_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART2_LBDL_Shift, 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART2_ADDM7_Shift, 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ USART2_CR3, USART2_BASE + 0x8 @ (Control register 3) 
        .equ USART2_WUFIE_Shift, 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ USART2_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ USART2_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART2_DEP_Shift, 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ USART2_DEM_Shift, 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART2_DDRE_Shift, 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ USART2_OVRDIS_Shift, 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART2_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART2_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART2_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART2_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_BRR, USART2_BASE + 0xC @ (Baud rate register) 
        .equ USART2_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART2_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART2_GTPR, USART2_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ USART2_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART2_RTOR, USART2_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART2_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART2_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART2_RQR, USART2_BASE + 0x18 @ (Request register) 
        .equ USART2_TXFRQ_Shift, 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ USART2_RXFRQ_Shift, 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART2_MMRQ_Shift, 2   @ bitWidth 1 (Mute mode request)  
        .equ USART2_SBKRQ_Shift, 1   @ bitWidth 1 (Send break request)  
        .equ USART2_ABRRQ_Shift, 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART2_ISR, USART2_BASE + 0x1C @ (Interrupt & status  register) 
        .equ USART2_REACK_Shift, 22   @ bitWidth 1 (Receive enable acknowledge  flag)  
        .equ USART2_TEACK_Shift, 21   @ bitWidth 1 (Transmit enable acknowledge  flag)  
        .equ USART2_WUF_Shift, 20   @ bitWidth 1 (Wakeup from Stop mode flag)  
        .equ USART2_RWU_Shift, 19   @ bitWidth 1 (Receiver wakeup from Mute  mode)  
        .equ USART2_SBKF_Shift, 18   @ bitWidth 1 (Send break flag)  
        .equ USART2_CMF_Shift, 17   @ bitWidth 1 (character match flag)  
        .equ USART2_BUSY_Shift, 16   @ bitWidth 1 (Busy flag)  
        .equ USART2_ABRF_Shift, 15   @ bitWidth 1 (Auto baud rate flag)  
        .equ USART2_ABRE_Shift, 14   @ bitWidth 1 (Auto baud rate error)  
        .equ USART2_EOBF_Shift, 12   @ bitWidth 1 (End of block flag)  
        .equ USART2_RTOF_Shift, 11   @ bitWidth 1 (Receiver timeout)  
        .equ USART2_CTS_Shift, 10   @ bitWidth 1 (CTS flag)  
        .equ USART2_CTSIF_Shift, 9   @ bitWidth 1 (CTS interrupt flag)  
        .equ USART2_LBDF_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART2_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART2_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART2_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART2_IDLE_Shift, 4   @ bitWidth 1 (Idle line detected)  
        .equ USART2_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART2_NF_Shift, 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART2_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART2_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART2_ICR, USART2_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART2_WUCF_Shift, 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ USART2_CMCF_Shift, 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART2_EOBCF_Shift, 12   @ bitWidth 1 (End of timeout clear flag)  
        .equ USART2_RTOCF_Shift, 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ USART2_CTSCF_Shift, 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART2_LBDCF_Shift, 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ USART2_TCCF_Shift, 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ USART2_IDLECF_Shift, 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ USART2_ORECF_Shift, 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART2_NCF_Shift, 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART2_FECF_Shift, 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART2_PECF_Shift, 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART2_RDR, USART2_BASE + 0x24 @ (Receive data register) 
        .equ USART2_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART2_TDR, USART2_BASE + 0x28 @ (Transmit data register) 
        .equ USART2_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real-time clock) 
    .equ RTC_TR, RTC_BASE + 0x0 @ (time register) 
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_DR, RTC_BASE + 0x4 @ (date register) 
        .equ RTC_YT_Shift, 20   @ bitWidth 4 (Year tens in BCD format)  
        .equ RTC_YU_Shift, 16   @ bitWidth 4 (Year units in BCD format)  
        .equ RTC_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_MT_Shift, 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_CR, RTC_BASE + 0x8 @ (control register) 
        .equ RTC_TSEDGE_Shift, 3   @ bitWidth 1 (Time-stamp event active  edge)  
        .equ RTC_REFCKON_Shift, 4   @ bitWidth 1 (RTC_REFIN reference clock detection  enable 50 or 60 Hz)  
        .equ RTC_BYPSHAD_Shift, 5   @ bitWidth 1 (Bypass the shadow  registers)  
        .equ RTC_FMT_Shift, 6   @ bitWidth 1 (Hour format)  
        .equ RTC_ALRAE_Shift, 8   @ bitWidth 1 (Alarm A enable)  
        .equ RTC_TSE_Shift, 11   @ bitWidth 1 (timestamp enable)  
        .equ RTC_ALRAIE_Shift, 12   @ bitWidth 1 (Alarm A interrupt enable)  
        .equ RTC_TSIE_Shift, 15   @ bitWidth 1 (Time-stamp interrupt  enable)  
        .equ RTC_ADD1H_Shift, 16   @ bitWidth 1 (Add 1 hour summer time  change)  
        .equ RTC_SUB1H_Shift, 17   @ bitWidth 1 (Subtract 1 hour winter time  change)  
        .equ RTC_BKP_Shift, 18   @ bitWidth 1 (Backup)  
        .equ RTC_COSEL_Shift, 19   @ bitWidth 1 (Calibration output  selection)  
        .equ RTC_POL_Shift, 20   @ bitWidth 1 (Output polarity)  
        .equ RTC_OSEL_Shift, 21   @ bitWidth 2 (Output selection)  
        .equ RTC_COE_Shift, 23   @ bitWidth 1 (Calibration output enable)  
 
    .equ RTC_ISR, RTC_BASE + 0xC @ (initialization and status  register) 
        .equ RTC_ALRAWF_Shift, 0   @ bitWidth 1 (Alarm A write flag)  
        .equ RTC_SHPF_Shift, 3   @ bitWidth 1 (Shift operation pending)  
        .equ RTC_INITS_Shift, 4   @ bitWidth 1 (Initialization status flag)  
        .equ RTC_RSF_Shift, 5   @ bitWidth 1 (Registers synchronization  flag)  
        .equ RTC_INITF_Shift, 6   @ bitWidth 1 (Initialization flag)  
        .equ RTC_INIT_Shift, 7   @ bitWidth 1 (Initialization mode)  
        .equ RTC_ALRAF_Shift, 8   @ bitWidth 1 (Alarm A flag)  
        .equ RTC_TSF_Shift, 11   @ bitWidth 1 (Time-stamp flag)  
        .equ RTC_TSOVF_Shift, 12   @ bitWidth 1 (Time-stamp overflow flag)  
        .equ RTC_TAMP1F_Shift, 13   @ bitWidth 1 (RTC_TAMP1 detection flag)  
        .equ RTC_TAMP2F_Shift, 14   @ bitWidth 1 (RTC_TAMP2 detection flag)  
        .equ RTC_RECALPF_Shift, 16   @ bitWidth 1 (Recalibration pending Flag)  
 
    .equ RTC_PRER, RTC_BASE + 0x10 @ (prescaler register) 
        .equ RTC_PREDIV_A_Shift, 16   @ bitWidth 7 (Asynchronous prescaler  factor)  
        .equ RTC_PREDIV_S_Shift, 0   @ bitWidth 15 (Synchronous prescaler  factor)  
 
    .equ RTC_ALRMAR, RTC_BASE + 0x1C @ (alarm A register) 
        .equ RTC_MSK4_Shift, 31   @ bitWidth 1 (Alarm A date mask)  
        .equ RTC_WDSEL_Shift, 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format.)  
        .equ RTC_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format.)  
        .equ RTC_MSK3_Shift, 23   @ bitWidth 1 (Alarm A hours mask)  
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format.)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format.)  
        .equ RTC_MSK2_Shift, 15   @ bitWidth 1 (Alarm A minutes mask)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format.)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD  format.)  
        .equ RTC_MSK1_Shift, 7   @ bitWidth 1 (Alarm A seconds mask)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format.)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD  format.)  
 
    .equ RTC_WPR, RTC_BASE + 0x24 @ (write protection register) 
        .equ RTC_KEY_Shift, 0   @ bitWidth 8 (Write protection key)  
 
    .equ RTC_SSR, RTC_BASE + 0x28 @ (sub second register) 
        .equ RTC_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_SHIFTR, RTC_BASE + 0x2C @ (shift control register) 
        .equ RTC_ADD1S_Shift, 31   @ bitWidth 1 (Reserved)  
        .equ RTC_SUBFS_Shift, 0   @ bitWidth 15 (Subtract a fraction of a  second)  
 
    .equ RTC_TSTR, RTC_BASE + 0x30 @ (timestamp time register) 
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format.)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format.)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format.)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD  format.)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format.)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD  format.)  
 
    .equ RTC_TSDR, RTC_BASE + 0x34 @ (timestamp date register) 
        .equ RTC_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_MT_Shift, 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_TSSSR, RTC_BASE + 0x38 @ (time-stamp sub second register) 
        .equ RTC_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_CALR, RTC_BASE + 0x3C @ (calibration register) 
        .equ RTC_CALP_Shift, 15   @ bitWidth 1 (Use an 8-second calibration cycle  period)  
        .equ RTC_CALW8_Shift, 14   @ bitWidth 1 (Use a 16-second calibration cycle  period)  
        .equ RTC_CALW16_Shift, 13   @ bitWidth 1 (Reserved)  
        .equ RTC_CALM_Shift, 0   @ bitWidth 9 (Calibration minus)  
 
    .equ RTC_TAFCR, RTC_BASE + 0x40 @ (tamper and alternate function configuration  register) 
        .equ RTC_PC15MODE_Shift, 23   @ bitWidth 1 (PC15 mode)  
        .equ RTC_PC15VALUE_Shift, 22   @ bitWidth 1 (PC15 value)  
        .equ RTC_PC14MODE_Shift, 21   @ bitWidth 1 (PC14 mode)  
        .equ RTC_PC14VALUE_Shift, 20   @ bitWidth 1 (PC14 value)  
        .equ RTC_PC13MODE_Shift, 19   @ bitWidth 1 (PC13 mode)  
        .equ RTC_PC13VALUE_Shift, 18   @ bitWidth 1 (RTC_ALARM output type/PC13  value)  
        .equ RTC_TAMP_PUDIS_Shift, 15   @ bitWidth 1 (RTC_TAMPx pull-up disable)  
        .equ RTC_TAMP_PRCH_Shift, 13   @ bitWidth 2 (RTC_TAMPx precharge  duration)  
        .equ RTC_TAMPFLT_Shift, 11   @ bitWidth 2 (RTC_TAMPx filter count)  
        .equ RTC_TAMPFREQ_Shift, 8   @ bitWidth 3 (Tamper sampling frequency)  
        .equ RTC_TAMPTS_Shift, 7   @ bitWidth 1 (Activate timestamp on tamper detection  event)  
        .equ RTC_TAMP2_TRG_Shift, 4   @ bitWidth 1 (Active level for RTC_TAMP2  input)  
        .equ RTC_TAMP2E_Shift, 3   @ bitWidth 1 (RTC_TAMP2 input detection  enable)  
        .equ RTC_TAMPIE_Shift, 2   @ bitWidth 1 (Tamper interrupt enable)  
        .equ RTC_TAMP1TRG_Shift, 1   @ bitWidth 1 (Active level for RTC_TAMP1  input)  
        .equ RTC_TAMP1E_Shift, 0   @ bitWidth 1 (RTC_TAMP1 input detection  enable)  
 
    .equ RTC_ALRMASSR, RTC_BASE + 0x44 @ (alarm A sub second register) 
        .equ RTC_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_BKP0R, RTC_BASE + 0x50 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP1R, RTC_BASE + 0x54 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP2R, RTC_BASE + 0x58 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP3R, RTC_BASE + 0x5C @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP4R, RTC_BASE + 0x60 @ (backup register) 
        .equ RTC_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 

@=========================== TIM15 ===========================@
.equ TIM15_BASE, 0x40014000 @ (General-purpose-timers) 
    .equ TIM15_CR1, TIM15_BASE + 0x0 @ (control register 1) 
        .equ TIM15_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM15_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM15_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM15_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM15_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM15_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM15_CR2, TIM15_BASE + 0x4 @ (control register 2) 
        .equ TIM15_OIS2_Shift, 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM15_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM15_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM15_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM15_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM15_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM15_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM15_SMCR, TIM15_BASE + 0x8 @ (slave mode control register) 
        .equ TIM15_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM15_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM15_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM15_DIER, TIM15_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM15_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM15_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM15_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM15_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM15_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM15_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM15_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM15_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM15_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM15_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM15_SR, TIM15_BASE + 0x10 @ (status register) 
        .equ TIM15_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM15_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM15_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM15_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM15_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM15_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM15_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM15_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM15_EGR, TIM15_BASE + 0x14 @ (event generation register) 
        .equ TIM15_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM15_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM15_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM15_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM15_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM15_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM15_CCMR1_Output, TIM15_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM15_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM15_OC2PE_Shift, 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM15_OC2FE_Shift, 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM15_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM15_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM15_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM15_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM15_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM15_CCMR1_Input, TIM15_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM15_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM15_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM15_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM15_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM15_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM15_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM15_CCER, TIM15_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM15_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM15_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM15_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM15_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM15_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM15_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM15_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM15_CNT, TIM15_BASE + 0x24 @ (counter) 
        .equ TIM15_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM15_PSC, TIM15_BASE + 0x28 @ (prescaler) 
        .equ TIM15_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM15_ARR, TIM15_BASE + 0x2C @ (auto-reload register) 
        .equ TIM15_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM15_RCR, TIM15_BASE + 0x30 @ (repetition counter register) 
        .equ TIM15_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM15_CCR1, TIM15_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM15_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM15_CCR2, TIM15_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM15_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM15_BDTR, TIM15_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM15_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM15_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM15_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM15_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM15_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM15_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM15_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM15_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM15_DCR, TIM15_BASE + 0x48 @ (DMA control register) 
        .equ TIM15_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM15_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM15_DMAR, TIM15_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM15_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM16 ===========================@
.equ TIM16_BASE, 0x40014400 @ (General-purpose-timers) 
    .equ TIM16_CR1, TIM16_BASE + 0x0 @ (control register 1) 
        .equ TIM16_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM16_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM16_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM16_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM16_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM16_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM16_CR2, TIM16_BASE + 0x4 @ (control register 2) 
        .equ TIM16_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM16_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM16_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM16_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM16_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM16_DIER, TIM16_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM16_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM16_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM16_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM16_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM16_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM16_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM16_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM16_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM16_SR, TIM16_BASE + 0x10 @ (status register) 
        .equ TIM16_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM16_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM16_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM16_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM16_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM16_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM16_EGR, TIM16_BASE + 0x14 @ (event generation register) 
        .equ TIM16_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM16_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM16_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM16_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM16_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM16_CCMR1_Output, TIM16_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM16_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM16_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM16_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM16_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM16_CCMR1_Input, TIM16_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM16_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM16_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM16_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM16_CCER, TIM16_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM16_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM16_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM16_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM16_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM16_CNT, TIM16_BASE + 0x24 @ (counter) 
        .equ TIM16_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM16_PSC, TIM16_BASE + 0x28 @ (prescaler) 
        .equ TIM16_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM16_ARR, TIM16_BASE + 0x2C @ (auto-reload register) 
        .equ TIM16_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM16_RCR, TIM16_BASE + 0x30 @ (repetition counter register) 
        .equ TIM16_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM16_CCR1, TIM16_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM16_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM16_BDTR, TIM16_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM16_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM16_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM16_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM16_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM16_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM16_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM16_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM16_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM16_DCR, TIM16_BASE + 0x48 @ (DMA control register) 
        .equ TIM16_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM16_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM16_DMAR, TIM16_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM16_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM17 ===========================@
.equ TIM17_BASE, 0x40014800 @ (General-purpose-timers) 
    .equ TIM17_CR1, TIM17_BASE + 0x0 @ (control register 1) 
        .equ TIM17_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM17_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM17_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM17_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM17_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM17_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM17_CR2, TIM17_BASE + 0x4 @ (control register 2) 
        .equ TIM17_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM17_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM17_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM17_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM17_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM17_DIER, TIM17_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM17_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM17_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM17_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM17_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM17_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM17_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM17_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM17_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM17_SR, TIM17_BASE + 0x10 @ (status register) 
        .equ TIM17_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM17_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM17_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM17_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM17_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM17_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM17_EGR, TIM17_BASE + 0x14 @ (event generation register) 
        .equ TIM17_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM17_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM17_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM17_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM17_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM17_CCMR1_Output, TIM17_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM17_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM17_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM17_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM17_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM17_CCMR1_Input, TIM17_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM17_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM17_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM17_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM17_CCER, TIM17_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM17_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM17_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM17_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM17_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM17_CNT, TIM17_BASE + 0x24 @ (counter) 
        .equ TIM17_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM17_PSC, TIM17_BASE + 0x28 @ (prescaler) 
        .equ TIM17_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM17_ARR, TIM17_BASE + 0x2C @ (auto-reload register) 
        .equ TIM17_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM17_RCR, TIM17_BASE + 0x30 @ (repetition counter register) 
        .equ TIM17_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM17_CCR1, TIM17_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM17_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM17_BDTR, TIM17_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM17_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM17_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM17_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM17_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM17_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM17_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM17_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM17_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM17_DCR, TIM17_BASE + 0x48 @ (DMA control register) 
        .equ TIM17_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM17_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM17_DMAR, TIM17_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM17_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== Flash ===========================@
.equ Flash_BASE, 0x40022000 @ (Flash) 
    .equ Flash_ACR, Flash_BASE + 0x0 @ (Flash access control register) 
        .equ Flash_LATENCY_Shift, 0   @ bitWidth 3 (LATENCY)  
        .equ Flash_PRFTBE_Shift, 4   @ bitWidth 1 (PRFTBE)  
        .equ Flash_PRFTBS_Shift, 5   @ bitWidth 1 (PRFTBS)  
 
    .equ Flash_KEYR, Flash_BASE + 0x4 @ (Flash key register) 
        .equ Flash_FKEYR_Shift, 0   @ bitWidth 32 (Flash Key)  
 
    .equ Flash_OPTKEYR, Flash_BASE + 0x8 @ (Flash option key register) 
        .equ Flash_OPTKEYR_Shift, 0   @ bitWidth 32 (Option byte key)  
 
    .equ Flash_SR, Flash_BASE + 0xC @ (Flash status register) 
        .equ Flash_EOP_Shift, 5   @ bitWidth 1 (End of operation)  
        .equ Flash_WRPRT_Shift, 4   @ bitWidth 1 (Write protection error)  
        .equ Flash_PGERR_Shift, 2   @ bitWidth 1 (Programming error)  
        .equ Flash_BSY_Shift, 0   @ bitWidth 1 (Busy)  
 
    .equ Flash_CR, Flash_BASE + 0x10 @ (Flash control register) 
        .equ Flash_FORCE_OPTLOAD_Shift, 13   @ bitWidth 1 (Force option byte loading)  
        .equ Flash_EOPIE_Shift, 12   @ bitWidth 1 (End of operation interrupt  enable)  
        .equ Flash_ERRIE_Shift, 10   @ bitWidth 1 (Error interrupt enable)  
        .equ Flash_OPTWRE_Shift, 9   @ bitWidth 1 (Option bytes write enable)  
        .equ Flash_LOCK_Shift, 7   @ bitWidth 1 (Lock)  
        .equ Flash_STRT_Shift, 6   @ bitWidth 1 (Start)  
        .equ Flash_OPTER_Shift, 5   @ bitWidth 1 (Option byte erase)  
        .equ Flash_OPTPG_Shift, 4   @ bitWidth 1 (Option byte programming)  
        .equ Flash_MER_Shift, 2   @ bitWidth 1 (Mass erase)  
        .equ Flash_PER_Shift, 1   @ bitWidth 1 (Page erase)  
        .equ Flash_PG_Shift, 0   @ bitWidth 1 (Programming)  
 
    .equ Flash_AR, Flash_BASE + 0x14 @ (Flash address register) 
        .equ Flash_FAR_Shift, 0   @ bitWidth 32 (Flash address)  
 
    .equ Flash_OBR, Flash_BASE + 0x1C @ (Option byte register) 
        .equ Flash_Data1_Shift, 24   @ bitWidth 8 (Data1)  
        .equ Flash_Data0_Shift, 16   @ bitWidth 8 (Data0)  
        .equ Flash_VDDA_MONITOR_Shift, 13   @ bitWidth 1 (VDDA_MONITOR)  
        .equ Flash_BOOT1_Shift, 12   @ bitWidth 1 (BOOT1)  
        .equ Flash_nRST_STDBY_Shift, 10   @ bitWidth 1 (nRST_STDBY)  
        .equ Flash_nRST_STOP_Shift, 9   @ bitWidth 1 (nRST_STOP)  
        .equ Flash_WDG_SW_Shift, 8   @ bitWidth 1 (WDG_SW)  
        .equ Flash_LEVEL2_PROT_Shift, 2   @ bitWidth 1 (Level 2 protection status)  
        .equ Flash_LEVEL1_PROT_Shift, 1   @ bitWidth 1 (Level 1 protection status)  
        .equ Flash_OPTERR_Shift, 0   @ bitWidth 1 (Option byte error)  
 
    .equ Flash_WRPR, Flash_BASE + 0x20 @ (Write protection register) 
        .equ Flash_WRP_Shift, 0   @ bitWidth 32 (Write protect)  
 

@=========================== DBGMCU ===========================@
.equ DBGMCU_BASE, 0x40015800 @ (Debug support) 
    .equ DBGMCU_IDCODE, DBGMCU_BASE + 0x0 @ (MCU Device ID Code Register) 
        .equ DBGMCU_DEV_ID_Shift, 0   @ bitWidth 12 (Device Identifier)  
        .equ DBGMCU_DIV_ID_Shift, 12   @ bitWidth 4 (Division Identifier)  
        .equ DBGMCU_REV_ID_Shift, 16   @ bitWidth 16 (Revision Identifier)  
 
    .equ DBGMCU_CR, DBGMCU_BASE + 0x4 @ (Debug MCU Configuration  Register) 
        .equ DBGMCU_DBG_STOP_Shift, 1   @ bitWidth 1 (Debug Stop Mode)  
        .equ DBGMCU_DBG_STANDBY_Shift, 2   @ bitWidth 1 (Debug Standby Mode)  
 
    .equ DBGMCU_APBLFZ, DBGMCU_BASE + 0x8 @ (APB Low Freeze Register) 
        .equ DBGMCU_DBG_TIMER2_STOP_Shift, 0   @ bitWidth 1 (Debug Timer 2 stopped when Core is  halted)  
        .equ DBGMCU_DBG_TIMER3_STOP_Shift, 1   @ bitWidth 1 (Debug Timer 3 stopped when Core is  halted)  
        .equ DBGMCU_DBG_TIMER6_STOP_Shift, 4   @ bitWidth 1 (Debug Timer 6 stopped when Core is  halted)  
        .equ DBGMCU_DBG_TIMER14_STOP_Shift, 8   @ bitWidth 1 (Debug Timer 14 stopped when Core is  halted)  
        .equ DBGMCU_DBG_RTC_STOP_Shift, 10   @ bitWidth 1 (Debug RTC stopped when Core is  halted)  
        .equ DBGMCU_DBG_WWDG_STOP_Shift, 11   @ bitWidth 1 (Debug Window Wachdog stopped when Core  is halted)  
        .equ DBGMCU_DBG_IWDG_STOP_Shift, 12   @ bitWidth 1 (Debug Independent Wachdog stopped when  Core is halted)  
        .equ DBGMCU_I2C1_SMBUS_TIMEOUT_Shift, 21   @ bitWidth 1 (SMBUS timeout mode stopped when Core is  halted)  
 
    .equ DBGMCU_APBHFZ, DBGMCU_BASE + 0xC @ (APB High Freeze Register) 
        .equ DBGMCU_DBG_TIMER1_STOP_Shift, 11   @ bitWidth 1 (Debug Timer 1 stopped when Core is  halted)  
        .equ DBGMCU_DBG_TIMER15_STO_Shift, 16   @ bitWidth 1 (Debug Timer 15 stopped when Core is  halted)  
        .equ DBGMCU_DBG_TIMER16_STO_Shift, 17   @ bitWidth 1 (Debug Timer 16 stopped when Core is  halted)  
        .equ DBGMCU_DBG_TIMER17_STO_Shift, 18   @ bitWidth 1 (Debug Timer 17 stopped when Core is  halted)  
 
